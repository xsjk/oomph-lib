\mainpage Demo problem: Flow in a 2D channel with an oscillating wall revisited -- AlgebraicElements: How to customise the mesh update

In many previous examples we illustrated how \c oomph-lib's
\c Domain  and \c MacroElement objects facilitate the generation of
refineable (and non-refineable) meshes in domains with moving, 
curvilinear boundaries. Consult, for instance:

- The tutorial <A HREF="../../../poisson/fish_poisson2/html/index.html">
  "How to create refineable meshes in domains with curvilinear and/or
  moving boundaries"</A> for a general discussion of the methodology. \n\n
- The tutorial 
  <A HREF="../../../unsteady_heat/two_d_unsteady_heat_ALE/html/index.html">
  "Spatially adaptive solution of the 2D unsteady heat equation with 
  flux boundary conditions in a moving domain: ALE methods"</A>
  for an example involving the unsteady heat equation. \n\n
- The tutorials \n\n
  - <A HREF="../../../navier_stokes/osc_ellipse/html/index.html">
    "Finite-Reynolds-number flow inside an oscillating ellipse"</A> \n\n
  .
  or 
  - <A HREF="../../../navier_stokes/collapsible_channel/html/index.html">
     "Flow in a 2D channel with an oscillating wall"</A> \n\n
  .
  for examples involving the Navier-Stokes equations.
.

The two main features of the \c MacroElement/Domain - based
node-update are that, once the curvilinear domain
is represented by a \c Domain object
-# Any subsequent mesh refinement will respect the curvilinear 
   domain boundaries. \n\n
-# The udate of the nodal positions in response to a change
   in the position of the domain's curvilinear boundaries
   may be performed by the "black-box" function 
   \c Mesh::node_update().
.


The availability of a "black-box" node-update procedure is
very convenient but in some applications it may be desirable (or
even necessary) to provide a customised node-update function, either
because the mesh deformation generated by the "black-box" procedure
is not appropriate or because it is not efficient. The latter problem
arises particularly in fluid-structure interaction problems. 

In this tutorial we shall demonstrate an alternative
node-update technique, based on \c oomph-lib's \c AlgebraicNode,
\c AlgebraicElement, and \c AlgebraicMesh classes. The key feature
of this approach is that it allows "each node to update its own
position". This is in contrast to the \c Domain/MacroElement-based approach 
in which we can only update the nodal positions of \e all nodes in the
mesh simultaneously -- not a particularly sparse operation!
[We note that the \c Node and \c FiniteElement base classes
provide the virtual functions \c Node::node_update()
and \c FiniteElement::node_update(). These functions are intended
to be used for node-by-node or element-by-element node-updates but
in their default implementations they are empty. Hence no node-update is
performed unless these functions are overloaded in derived classes
such as \c AlgebraicNode and \c AlgebraicElement.]

<HR>
<HR>

\section overview Overview
The idea behind the algebraic node-updates is simple: The \c
AlgebraicMesh class (the base class for meshes containing \c
AlgebraicElements and \c AlgebraicNodes) contains the 
pure virtual function

\code
void AlgebraicMesh::algebraic_node_update(..., AlgebraicNode* node_pt)=0;
\endcode

which must be implemented in every specific \c AlgebraicMesh.
Its task is to update the position of the node specified by 
the pointer-valued argument. \n\n

The specific implementation of the node-update operation is obviously 
problem-dependent but it is easy to illustrate the general 
procedure  by considering the collapsible channel mesh
sketched below:

@I w 0.75\textwidth alg_node_update_sketch "Sketch of the algebraic node-update procedure for the collapsible channel mesh. "

  The upper figure shows the mesh in the undeformed domain
in which wall shape is parametrised by the intrinsic (Lagrangian)
coordinate \f$ \zeta \f$ as \f$ {\bf R}(\zeta,t=0) =
(L_{up} + \zeta, 1) ^T. \f$  In this
configuration each node is located at a certain fraction along the 
vertical lines across the channel. For instance, the \f$ j\f$-th
node (drawn in blue) is located at a fraction of \f$ \omega_j = 1/3
\f$ along the straight line
that connects reference point \f$ {\bf A}_j \f$ on the bottom wall to
reference point \f$ {\bf B}_j \f$ on the flexible upper wall.
We note that reference point  \f$ {\bf B}_j \f$ may be identified by 
its Lagrangian coordinate \f$ \zeta_j \f$ on the wall.


The lower figure shows a sketch of the deformed domain and 
illustrates a possible algebraic node-update strategy: Given the
new wall shape, described by \f$ {\bf R}(\zeta,t) \f$, we position each node 
on the straight line that connects its reference point 
\f$ {\bf A}'_j = {\bf A}_j \f$ on the lower wall to the reference
point \f$ {\bf B}'_j = {\bf R}(\zeta_j,t) \f$  on the deformable upper wall.

To perform this node-update procedure for a specific node, we
generally have to store
- A pointer to one (or more) \c GeomObject(s) that define the
  curvilinear domain boundaries. \n\n
- A number of node-specific reference values (such as \f$ \omega_j, \ 
  \zeta_j \f$, and the \f$ x_1 \f$ -coordinate of point \f$ {\bf A}_j
  \f$, \f$ X^{(A)}_j \f$, say)
  that establish the node's position relative to these \c GeomObjects.
  \n\n
- A pointer to the \c AlgebraicMesh that implements 
  the node-update procedure.
.
Since the node-update data is node-specific, we provide storage
for it in the \c AlgebraicNode class -- a class that is derived from
the \c Node class. The node-update function itself is shared by 
many nodes in the mesh and is implemented in 
\c AlgebraicMesh::algebraic_node_update(...).
This function extracts the node-update parameters, \f$ \omega_j, \ 
\zeta_j \f$, and \f$ X^{(A)}_j \f$ and the pointer to the \c GeomObject
that parametrises the wall, \c wall_pt, say, from the 
\c AlgebraicNode passed to it. With these parameters, the position 
of reference point\f${\bf A}'_j \f$ is given by 
\f$ {\bf A}'_j = (X_j^{(A)},0)^T \f$ while the coordinates of
reference point  \f$ {\bf B}'_j = {\bf R}(\zeta_j,t)\f$ may be
obtained from a call to \c wall_pt->position(...). The nodal 
position  \f$ {\bf r}_j \f$ may then be updated via
\f[
{\bf r}_j = 
{\bf A}_j' 
+ \omega_j
\left(
{\bf B}_j'-{\bf A}_j'
\right)
\f]


<HR> 
<HR>

\section how_to_use How to use existing AlgebraicMeshes
To use the algebraic node-update capabilities of an existing 
\c AlgebraicMesh, all \c Nodes must be replaced by \c AlgebraicNodes
to allow the storage of the node-specific node-update parameters. 
Recall that within \c oomph-lib \c Nodes are usually created by the 
elements, using the function \c FiniteElement::construct_node(...)
whose argument specifies the local node number of the
newly created \c Node within the element that creates it. 
(The specification of the local node number is required to allow the 
\c FiniteElement::construct_node(...) function to create a \c Node
with the appropriate number of values and history values. For instance,
in 2D Taylor-Hood Navier-Stokes elements, the elements' vertex nodes have
to store three values, representing the two velocity components and
the pressure, whereas all other nodes only require storage for the
two velocity components.) 

  To ensure that the \c FiniteElement::construct_node(...) function creates
\c AlgebraicNodes rather than "ordinary" \c Nodes, we provide
the templated wrapper class

\code
template<ELEMENT>
class AlgebraicElement<ELEMENT> : public ELEMENT
\endcode

which overloads the \c FiniteElement::construct_node(...) function so that it
creates \c AlgebraicNodes instead. In most other respects, the
"wrapped" element behaves exactly as the underlying \c ELEMENT itself.
To use an existing \c AlgebraicMesh
with a certain element type, \c QTaylorHoodElement<2>, say, we 
simply "upgrade" the element to an \c AlgebraicElement by 
specifying the element type as \c AlgebraicElement<QTaylorHoodElement<2> >.  

The changes to an existing driver code that performs the node update
by the default \c Domain/MacroElement methodology are therefore
completely trivial. You may wish to compare the driver code
<A HREF="../../../../demo_drivers/navier_stokes/collapsible_channel/collapsible_channel.cc">collapsible_channel.cc</A>, discussed in 
<A HREF="../../collapsible_channel/html/index.html">an
earlier example</A>, to the driver code <A HREF="../../../../demo_drivers/navier_stokes/collapsible_channel/collapsible_channel_algebraic.cc">
collapsible_channel_algebraic.cc</A> in which the fluid domain is
discretised by the \c MyAlgebraicCollapsibleChannelMesh, discussed
below.

 
<HR>
<HR>

\section how_to_write How to create a new AlgebraicMesh -- a basic example
To illustrate how to create a new \c AlgebraicMesh, we will now
discuss the implementation of the \c MyAlgebraicCollapsibleChannelMesh
-- an \c AlgebraicMesh - version of the \c CollapsibleChannelMesh,
used in <A HREF="../../collapsible_channel/html/index.html"> the
earlier example</A>. 

<HR>

\subsection class The class definition

We construct the mesh by multiple inheritance from the \c AlgebraicMesh
base class, and the already-existing \c CollapsibleChannelMesh.
The constructor first calls the constructor of the underlying 
\c CollapsibleChannelMesh (thus "recycling" the basic mesh
generation process, i.e. the generation of nodes and elements etc.) 
and then adds the algebraic node-update information 
by calling the function \c setup_algebraic_node_update().

\dontinclude my_alg_channel_mesh.h
\skipline start_algebraic_mesh
\until }

We declare the interface for the pure virtual function 
\c algebraic_node_update(...), to be discussed below, and
implement a second pure virtual function,
\c AlgebraicMesh::update_node_update(), that may be used to update
reference values following a mesh adaptation. Since the current
mesh is not refineable, we leave this function empty and refer to
<A HREF="../../../interaction/fsi_collapsible_channel_adapt/html/index.html">
another example</A> for a more detailed discussion of its role.


\skipline Update nodal
\until update_node_update

The protected member function  \c setup_algebraic_node_update() 
will be discussed below.

\skipline protected:
\until };

<HR>

\subsection setting_up Setting up the algebraic node update 
When the function \c setup_algebraic_node_update() is called,
the constructor of the underlying \c CollapsibleChannelMesh will 
already have created the mesh's elements and nodes, and the
nodes will be located at their initial positions in the undeformed
domain.

To set up the algebraic node-update data, we start by extracting the 
lengths of the upstream rigid section, \f$ L_{up} \f$, and the 
length of the collapsible segment,
\f$ L_{collapsible} \f$, from the \c CollapsibleChannelDomain:

\skipline start_setup
\until l_collapsible

Next, we loop over all \c AlgebraicNodes in the mesh and
determine their current positions:

\skipline Loop over
\until y=


If the \c j -th node is located in the "collapsible" section of the mesh
we determine its reference coordinate, \f$ \zeta_j \f$, on the wall
and determine the coordinates of its reference point \f$ {\bf B}_j
\f$ from the \c GeomObject that represents the moving wall.

\skipline Check
\until ->position(

Just to be on the safe side, we check that the wall is actually in its
undeformed configuration, as assumed.

\skipline Confirm that
\until endif

Next, we package the data required for the node-update
operations (the pointers to \c GeomObject(s) and the reference 
values) into vectors. In the present example, the node-update
operation only involves a single \c GeomObject:

\skipline Only a single
\until =this->Wall_pt;

We have three reference values: The \f$ x_1 \f$ - coordinate of
point \f$ {\bf A}_j \f$,

\skipline The update 
\until r_wall[0];

as well as the fractional height, \f$ \omega_j \f$,

\skipline Second
\until r_wall[1];

and the reference coordinate, \f$ \zeta_j \f$, along the wall:

\skipline Third
\until zeta[0];

The vectors of reference values and geometric objects are then
passed to the node, together with the pointer to the mesh
(\c this) that implements the node-update function. 

\until end of 
<HR>

\subsection node_update The node-update function

The function \c algebraic_node_update(...) reverses the setup process:
It extracts the node-update data from the \c AlgebraicNode and
updates its position at the \c t -th previous time-level:

\skipline start_of_algebraic
\until {

We start by extracting the vectors of reference values and \c
GeomObjects involved in this node's node-update, using the functions
\c AlgebraicNode::vector_ref_value() which returns a Vector
of reference values, and the function  
\c AlgebraicNode::vector_geom_object_pt() which returns a Vector of
pointers to \c GeomObjects. 

\skipline Extract
\until Vector<GeomObject*>

Next, we translate these into local variables,

  
\skipline First reference
\until GeomObject*


and obtain the current wall position from the wall \c GeomObject.

\skipline Get position vector
\until wall_pt

Finally, we update the nodal position:

\skipline Assign
\until }

Done!

<HR>
<HR>


\section comments Comments and Exercises
\subsection comm Comments
- <B>Element-by-element and global node updates:</B> \n \n
  As explained above, the re-implementation of the (empty) 
  \c Node::node_update() function 
  by \c AlgebraicNode::node_update() allows each node to "update its 
  own position". The \c AlgebraicMesh and 
  \c AlgebraicElement classes provide their own re-implementation
  of the \c node_update() functions in the \c Mesh and \c
  FiniteElement classes, and perform the node-updates by executing
  the \c AlgebraicNode::node_update() function of their constituent
  nodes. \n\n
- <B>Default node-update function:</B> \n \n
  We stress that, in the above example, it was only necessary to set 
  up the node-update data for the
  nodes in the central "collapsible" part of the mesh as they are
  the only modes whose position is affected by the motion of the 
  curvilinear boundary. This is possible because the \c
  AlgebraicNode constructor provides default assignments for 
  the node-update data. In particular, the pointer to the Mesh that
  performs the node update is initialised by a pointer to the
  (static instantiation of a) \c DummyMesh whose 
  \c AlgebraicMesh::algebraic_node_update(...) and
  \c AlgebraicMesh::update_node_update(...) functions are empty. 
  This ensures that nodes for which these default assignments are not
  overwritten stay at their original position when the node udate
  is performed. This implementation provides a sensible
  default behaviour for the node update. \n\n
- <B>Multiple node-update functions:</B> \n \n
  In the simple example considered here, a single node-update function
  was sufficient to update the positions of all moving nodes in
  the mesh. In more complicated meshes, it may be be necessary to
  provide different node-update functions for nodes that are located
  in different parts of the mesh. To facilitate the implementation of
  such cases, it is possible to specify an identifier for the 
  node-update function when calling the 
  \c AlgebraicNode::add_node_update_info(...) function, using its
  alternative interface
  \code
  void AlgebraicNode::add_node_update_info(
      const int& id,                              // ID of the node-update fct
      AlgebraicMesh* mesh_pt,                     // pointer to mesh
      const Vector<GeomObject*>& geom_object_pt,  // vector of geom objects
      const Vector<double>& ref_value);           // vector of ref. values
  \endcode
  When implementing the \c AlgebraicMesh::algebraic_node_update(...)
  function for a mesh that contains multiple node-update functions,
  the ID of the node-update function associated with a particular
  node can be obtained from \c AlgebraicNode::node_update_fct_id(),
  allowing the node-update function to take the appropriate
  action. (As an example, consider the implementation of the
  algebraic node-update function for the \c
  RefineableAlgebraicFishMesh in which different node-update
  functions are used to update the position of nodes in the fish's "body"
  and in its "tail".)  If the  \c AlgebraicNode::add_node_update_info(...) 
  function is called without specifying an ID, a default ID of 0 is assigned. 
  \n\n
- <B>Consistency between multiple node-update functions:</B> \n \n
  If a mesh contains multiple node-update functions, it is likely
  that some nodes are located at the interface between 
  regions that are updated by different node-update functions.
  As indicated by the \c "add_..." in the 
  \c AlgebraicNode::add_node_update_info(...) function,
  \c AlgebraicNodes may be associated with
  multiple node-update functions, though the different node-update functions
  associated with a node must, of course, give the same result. This
  may be verified by calling the \c AlgebraicNode::self_test() 
  function for all nodes in an \c AlgebraicMesh.
  \n \n
  \b Note: In refineable \c AlgebraicMeshes (discussed in more detail
  below), \c AlgebraicNodes \b must be associated with all possible 
  node-update functions to ensure that the reference values for
  newly created nodes are determined correctly during the 
  adaptive mesh refinement.
  \n\n
- <B>Adaptivity:</B> \n \n
  Refineable \c AlgebraicMeshes may be created by multiple inheritance
  from a suitable \c RefineableMesh base class (e.g. the \c
  RefineableQuadMesh class), and setting up the required tree
  representation of the coarse initial mesh, exactly 
  as for "ordinary" meshes (see the tutorial 
  <A HREF="../../../poisson/two_d_poisson_adapt/html/index.html">
  "How to create simple refineable meshes"</A> for details).
  As an example, here is the class definition for a refineable
  version of the \c MyAlgebraicCollapsibleChannelMesh discussed above:
  \n \n 
  \dontinclude my_alg_channel_mesh.h
  \skipline start_refineable_algebraic_collapsible_channel_mesh
  \until }
  \skipline };
  \n 
  Note that none of the functions defined in the non-refineable
  version of this mesh have to be re-implemented. This raises the
  question of how the node-update data for any newly created nodes
  are determined when the mesh is refined. By default, 
  the reference values for any newly created 
  \c AlgebraicNodes are determined by interpolation from
  the node's "father element". Furthermore, it is assumed  
  that the same \c GeomObjects are involved
  in the node-update function for the newly created node.  
  This default behaviour is appropriate for the
  mesh considered here. In other cases, (e.g. in the corresponding 
  <A HREF="../../../interaction/fsi_collapsible_channel_algebraic/html/index.html">
  fluid-structure interaction problem</A>), some or all of the
  node-update data may have to be recomputed when the mesh
  is adapted. Such updates may be performed by 
  the \c AlgebraicMesh::update_node_update(...) function
  which is executed automatically whenever a refineable
  \c AlgebraicMesh is adapted.
  \n\n
- <B>Node updates for hanging nodes:</B> \n \n
  Recall that refineable meshes may contain hanging nodes whose 
  position is constrained by its "master nodes".
  When the \c AlgebraicNode::node_update(...) function is
  called for a hanging node, it first updates the position 
  of its master nodes (using their own node-update functions)
  and then updates its own constrained position accordingly.
  \n\n
- <B>Automatic finite-differencing with respect to geometric Data:</B> 
  \n\n
  Algebraic node updates are particularly useful in fluid-structure 
  interaction problems since they allow the development of "sparse"
  node update procedures in which each (solid mechanics) degree of
  freedom only affects the position of a small number of nodes in the 
  fluid mesh. We will discuss fluid-structure interaction problems
  in more detail 
  <A HREF="../../../interaction/fsi_collapsible_channel_algebraic/html/index.html">
elsewhere</A> but stress already that one of 
  the major complications in such problems (and, in fact, in any
  free-boundary problem) is the need to evaluate the so-called
  shape derivatives -- the derivatives of the "bulk" (here the
  Navier-Stokes) equations with respect to the degrees of freedom
  (here the nodal positions in the wall mesh) that affect the 
  position of the nodes in the "bulk" mesh.
  \n\n
  The algebraic node update procedures discussed above are 
  sufficiently general to handle such interactions. The 
  shape/position of the \c GeomObjects that are involved in an 
  \c AlgebraicNode's node update, may depend on unknowns in the
  overall problem. Such unknowns constitute a \c GeomObject's
  geometric \c Data which may be obtained from its member function 
  \c GeomObject::geom_data_pt(...).
  \c AlgebraicElements use finite differencing to include the
  shape derivatives (i.e. the derivatives
  of the residuals of the underlying (wrapped) element with respect
  to the geometric \c Data involved in the element's node update)
  into the element's Jacobian matrix.
  \n\n
- <B>Additional sanity checks and other generalisations:</B> \n \n
  The \c MyAlgebraicCollapsibleChannelMesh and its refineable 
  equivalent are slightly simplified versions of the
  meshes in \c oomph-lib's \c src/meshes directory. These meshes
  contain a number of additional sanity checks that we omitted
  here for the sake of brevity. Furthermore, these meshes
  can be used with \c GeomObjects that comprise "sub-"\c
  GeomObjects, a feature that is essential in problems with
  proper fluid-structure interaction. We will discuss this in 
  <A HREF="../../../interaction/fsi_collapsible_channel_algebraic/html/index.html">
  another example.</A>
  
\subsection exx Exercises
-# If you inspect the  
   <A HREF="../../../../demo_drivers/navier_stokes/collapsible_channel/my_alg_channel_mesh.h">source
code</A> 
   for the \c MyAlgebraicCollapsibleChannelMesh, you will notice that
   the mesh has an additional constructor that allows the
   specification of the "boundary layer squash function" first 
   introduced in the original \c CollapsibleChannelMesh. 
   Explain why in the \c AlgebraicMesh version of this mesh, the
   function pointer to the "boundary layer
   squash function" can only be specified via the constructor -- the 
   access function is deliberately broken.



<HR>
<HR>


\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/collapsible_channel/">
demo_drivers/navier_stokes/collapsible_channel/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/collapsible_channel/collapsible_channel_algebraic.cc">
demo_drivers/navier_stokes/collapsible_channel/collapsible_channel_algebraic.cc
</A>
</CENTER>
.
