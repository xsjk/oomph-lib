\mainpage Example problem: Spin-up of a viscous fluid

This is our first axisymmetric Navier--Stokes example problem. We
discuss the non-dimensionalisation of the equations and their
implementation in \c oomph-lib, and demonstrate the solution of a
spin-up problem.

<HR>
<HR>

\section equations The axisymmetric Navier--Stokes equations

In dimensional form the axisymmetric Navier--Stokes equations are
given by the momentum equations (for the \f$ r^* \f$ , \f$ z^* \f$ and
\f$ \theta \f$ directions, respectively)
<CENTER>
\f[
\rho \left[
  \frac{\partial u_r^*}{\partial t^*}
  + {u_r^*}\frac{\partial u_r^*}{\partial r^*}
  - \frac{{u_{\theta}^*}^2}{r^*}
  + {u_z^*}\frac{\partial u_r^*}{\partial z^*}
\right] = B_r^*\left(r^*,z^*,t^*\right)
+ \rho G_r^*
+ \frac{\partial \tau_{rr}^*}{\partial r^*}
+ \frac{\tau_{rr}^*}{r^*}
- \frac{\tau_{\theta\theta}^*}{r^*}
+ \frac{\partial\tau_{rz}^*}{\partial z^*},
\f]
\f[
\rho \left[
  \frac{\partial u_z^*}{\partial t^*}
  + {u_r^*}\frac{\partial u_z^*}{\partial r^*}
  + {u_z^*}\frac{\partial u_z^*}{\partial z^*}
\right] = B_z^*\left(r^*,z^*,t^*\right)
+ \rho G_z^*
+ \frac{\partial \tau_{zr}^*}{\partial r^*}
+ \frac{\tau_{zr}^*}{r^*}
+ \frac{\partial\tau_{zz}^*}{\partial z^*},
\f]
\f[
\rho \left[
  \frac{\partial u_{\theta}^*}{\partial t^*}
  + {u_r^*}\frac{\partial u_{\theta}^*}{\partial r^*}
  + \frac{u_r^* u_{\theta}^*}{r^*}
  + u_z^* \frac{\partial u_{\theta}^*}{\partial z^*}
\right] = B_\theta^*\left(r^*,z^*,t^*\right)
+ \rho G_\theta^*
+ \frac{\partial \tau_{\theta r}^*}{\partial r^*}
+ \frac{\tau_{\theta r}^*}{r^*}
+ \frac{\tau_{r\theta}^*}{r^*}
+ \frac{\partial\tau_{\theta z}^*}{\partial z^*},
\f]
</CENTER>

and the continuity equation

<CENTER>
\f[
\frac{\partial u_r^*}{\partial r^*}
+ \frac{u_r^*}{r^*}
+ \frac{\partial u_z^*}{\partial z^*}
= Q^*,
\f]
</CENTER>

where \f$ u_r^* \f$ , \f$ u_z^* \f$ and \f$ u_{\theta}^* \f$ are the
radial, axial and azimuthal velocity components respectively, \f$ p^*
\f$ is the pressure and \f$ t^* \f$ is time. We have split the body
force into two components: A constant vector \f$ \rho \ G_i^* \f$
(where \f$ i = r, z, \theta \f$) which typically represents
gravitational forces; and a variable body force, \f$
B_i^*(r^*,z^*,t^*) \f$ . \f$ Q^*(r^*,z^*,t^*) \f$ is a volumetric
source term for the continuity equation and is typically equal to
zero.

The components of the dimensional stress tensor \f$ \tau_{ij}^* \f$ are
defined as: 

<CENTER>
\f[
\tau_{rr}^* = -p^*
+ \mu (1+\Gamma) \frac{\partial u_r^*}{\partial r^*},
\qquad
\tau_{\theta\theta}^* = -p^*
+ \mu (1+\Gamma) \frac{u_r^*}{r^*},
\qquad
\tau_{zz}^* = -p^*
+ \mu (1+\Gamma) \frac{\partial u_z^*}{\partial z^*},
\f]
\f[
\tau_{rz}^* = \mu \left(
  \frac{\partial u_r^*}{\partial z^*}
  + \Gamma \frac{\partial u_z^*}{\partial r^*}
\right),
\qquad
\tau_{zr}^* = \mu \left(
  \frac{\partial u_z^*}{\partial r^*}
  + \Gamma \frac{\partial u_r^*}{\partial z^*}
\right),
\f]
\f[
\tau_{r \theta}^* = \mu \left(
  \Gamma \frac{\partial u_{\theta}^*}{\partial r^*}
  - \frac{u_{\theta}^*}{r^*}
\right),
\qquad
\tau_{\theta r}^* = \mu \left(
  \frac{\partial u_{\theta}^*}{\partial r^*}
  - \Gamma \frac{u_{\theta}^*}{r^*}
\right),
\f]
\f[
\tau_{\theta z}^* = \mu \frac{\partial u_{\theta}^*}{\partial z^*},
\qquad
\tau_{z \theta}^* = \mu \Gamma \frac{\partial u_{\theta}^*}{\partial z^*}.
\f]
</CENTER>

We note that taking \f$ \Gamma=1 \f$ corresponds to using the
stress-divergence form of the viscous term in the Navier--Stokes
equations, which is the form that \c oomph-lib uses by default. We
can, however, recover the `standard' form by setting \f$ \Gamma=0 \f$.

We non-dimensionalise the equations, using problem-specific reference
quantities for the velocity, \f$ {\cal U},\f$ length, \f$ {\cal L},
\f$ and time, \f${\cal T},\f$ and scale the constant body force vector
on the gravitational acceleration, \f$ g, \f$ so that
<CENTER>
\f[
u_r^* = {\cal U} \, u_r, \qquad
u_z^* = {\cal U} \, u_z, \qquad
u_\theta^* = {\cal U} \, u_\theta,
\f]
\f[
r^* = {\cal L} \, r, \qquad
z^* = {\cal L} \, z, \qquad
t^* = {\cal T} \, t, \qquad
G_i^* = g \, G_i,
\f]
\f[
p^* = \frac{\mu_{ref} {\cal U}}{{\cal L}} \, p, \qquad
B_i^* = \frac{{\cal U}\mu_{ref}}{{\cal L}^2} \, B_i, \qquad
Q^* = \frac{{\cal U}}{{\cal L}}\, Q,
\f]
</CENTER>
where we note that the pressure and the variable body force have been
non-dimensionalised on the viscous scale. \f$ \mu_{ref} \f$ and \f$
\rho_{ref} \f$ are reference values for the fluid
viscosity and density, respectively. In single-fluid problems, they
are identical to the viscosity \f$ \mu \f$ and density \f$ \rho \f$ of
the (one and only) fluid in the problem.

The non-dimensional form of the axisymmetric Navier--Stokes equations
is then given by
<CENTER>
\f[
R_{\rho} Re \left[
  St \frac{\partial u_r}{\partial t}
  + u_r \frac{\partial u_r}{\partial r}
  - \frac{u_\theta^2}{r}
  + u_z \frac{\partial u_r}{\partial z}
\right] = B_r\left(r,z,t\right)
+ R_\rho \frac{Re}{Fr} G_r
+ \frac{\partial \tau_{rr}}{\partial r}
+ \frac{\tau_{rr}}{r}
- \frac{\tau_{\theta\theta}}{r}
+ \frac{\partial \tau_{rz}}{\partial z},
\f]
\f[
R_{\rho} Re \left[
St \frac{\partial u_z}{\partial t}
+ u_r \frac{\partial u_z}{\partial r}
+ u_z \frac{\partial u_z}{\partial z}
\right] = B_z\left(r,z,t\right)
+ R_\rho \frac{Re}{Fr} G_z
+ \frac{\partial \tau_{zr}}{\partial r}
+ \frac{\tau_{zr}}{r}
+ \frac{\partial \tau_{zz}}{\partial z},
\f]
\f[
R_{\rho} Re \left[
St \frac{\partial u_\theta}{\partial t}
+ u_r \frac{\partial u_\theta}{\partial r}
+ \frac{u_r u_\theta}{r}
+ u_z \frac{\partial u_\theta}{\partial z}
\right] = B_\theta\left(r,z,t\right)
+ R_\rho \frac{Re}{Fr} G_\theta
+ \frac{\partial \tau_{\theta r}}{\partial r}
+ \frac{\tau_{\theta r}}{r}
+ \frac{\tau_{r \theta}}{r}
+ \frac{\partial \tau_{\theta z}}{\partial z},
\f]
</CENTER>

and

<CENTER>
\f[
\frac{\partial u_r}{\partial r}
+ \frac{u_r}{r}
+ \frac{\partial u_z}{\partial z}
= Q.
\f]
</CENTER>

Here the components of the non-dimensional stress tensor \f$ \tau_{ij}
\f$ are defined as:

<CENTER>
\f[
\tau_{rr} = -p + R_\mu (1+\Gamma) \frac{\partial u_r}{\partial r},
\qquad
\tau_{\theta\theta} = -p + R_\mu (1+\Gamma) \frac{u_r}{r},
\qquad
\tau_{zz} = -p + R_\mu (1+\Gamma) \frac{\partial u_z}{\partial z},
\f]
\f[
\tau_{rz} = R_\mu \left(
  \frac{\partial u_r}{\partial z}
  + \Gamma \frac{\partial u_z}{\partial r}
\right),
\qquad
\tau_{zr} = R_\mu \left(
  \frac{\partial u_z}{\partial r}
  + \Gamma \frac{\partial u_r}{\partial z}
\right),
\f]
\f[
\tau_{r \theta} = R_\mu \left(
  \Gamma \frac{\partial u_\theta}{\partial r}
  - \frac{u_\theta}{r}
\right),
\qquad
\tau_{\theta r} = R_\mu \left(
  \frac{\partial u_\theta}{\partial r}
  - \Gamma \frac{u_\theta}{r} \right),
\f]
\f[
\tau_{\theta z} = R_\mu \frac{\partial u_\theta}{\partial z}
\qquad
\tau_{z \theta} = R_\mu \Gamma \frac{\partial u_\theta}{\partial z}.
\f]
</CENTER>

The dimensionless parameters
<CENTER>
\f[
Re = \frac{{\cal U}{\cal L}\rho_{ref}}{\mu_{ref}}, \qquad 
St = \frac{{\cal L}}{{\cal U}{\cal T}}, \qquad 
Fr = \frac{{\cal U}^2}{g{\cal L}},
\f]
</CENTER>
are the Reynolds number, Strouhal number and Froude number
respectively. \f$ R_\rho=\rho/\rho_{ref} \f$ and \f$ R_\mu
=\mu/\mu_{ref}\f$ represent the ratios of the fluid's density and its
dynamic viscosity, relative to the density and viscosity values used
to form the non-dimensional parameters (By default, \f$ R_\rho = R_\mu
= 1 \f$ ; other values tend to be used in problems involving multiple
fluids). We refer to <A HREF="../../../navier_stokes/driven_cavity/html/index.html#params">another tutorial</A> 
for a more detailed discussion of these non-dimensional parameters and
their default values.

The above equations are typically augmented by Dirichlet boundary conditions
for (some of) the velocity components. On boundaries where 
no velocity boundary conditions are applied, the flow satisfies the
"traction free" natural boundary condition
\f$ t_i = 0 \f$. For example, in the spin-up problem to be considered
below, no condition is
applied to the \f$ z \f$-component of the velocity on the symmetry
boundary, which means that the traction in this direction, \f$ t_z \f$,
is equal to zero.

If the velocity is prescribed along the entire domain boundary, 
the fluid pressure \f$ p \f$ is only determined up to an arbitrary
constant. This indeterminacy may be overcome by prescribing the 
value of the pressure at a single point in the domain. See the
exercises at the end of the (non-axisymmetric) <A HREF="../../../navier_stokes/driven_cavity/html/index.html#exercises">driven cavity example</A>
for further discussion of this issue.

<HR>
<HR>

\section implementation Implementation

\c oomph-lib provides two LBB-stable isoparametric axisymmetric
Navier--Stokes elements that are based on the \c QElement<2,3> family of 
geometric finite elements. They are nine-node quadrilateral elements
which only differ in the way in which the pressure is represented. In
\c AxisymmetricQCrouzeixRaviartElements the pressure is represented by
a discontinuous, piecewise bi-linear function. \c
AxisymmetricQTaylorHoodElements represent the pressure by a
globally-continuous, piecewise bi-linear interpolation between the
pressure values that are stored at the elements' four corner nodes.

The implementation of these axisymmetric Navier--Stokes elements is
very similar to their non-axisymmetric counterparts, discussed in
detail in <A HREF="../../../navier_stokes/driven_cavity/html/index.html#element_types">another tutorial</A>.
The radial and axial nodal positions are stored at the first and
second nodal coordinates respectively, and can therefore be accessed
by the member functions
- Radial coordinate (\f$ r \f$): \c Node::x(0)
- Axial coordinate (\f$ z \f$): \c Node::x(1)

By default the radial, axial and azimuthal components are stored as
the first, second and third nodal values respectively, and can
therefore be accessed by the member functions
- Radial component (\f$ u_r \f$): \c Node::value(0)
- Axial component (\f$ u_z \f$): \c Node::value(1)
- Azimuthal component (\f$ u_\theta \f$): \c Node::value(2)

<HR>
<HR>

\section example The example problem

The solution of the axisymmetric Navier--Stokes equations will be
illustrated using the example of a spin-up problem. We consider a
sealed cylindrical container of radius \f$ R \f$ and height \f$ H \f$,
filled with a fluid of density \f$ \rho \f$ and dynamic viscosity \f$
\mu \f$. Both the fluid and the cylinder are initially at rest, and at
time \f$ t=0 \f$ the cylinder immediately begins to rotate about its
vertical axis of symmetry with a constant angular velocity \f$ \Omega
\f$. Initially, the bulk of the fluid remains stationary, with the
exception of the regions next to the solid boundaries. The fluid near
the top and bottom `lids' is moving faster than that along the
bulk of the cylinder, and gets driven radially outward. It is replaced
by fluid from the interior, setting up secondary flows in the \f$ r \f$-\f$ z
\f$ plane, until eventually the 
entire fluid is moving in solid body rotation with the cylinder.

@I w 0.3\textwidth spin_up_diagram "Sketch of the problem. The red `slice' represents the domain in which the axisymmetric Navier--Stokes equations will be solved. "

We model this problem by solving the axisymmetric Navier--Stokes
equations in a rectangular domain of width \f$ R \f$ and height \f$ H
\f$. For our non-dimensionalisation we choose the length scale \f$
{\cal L} \f$ to be the radius of the cylinder \f$ R \f$ and the
velocity scale \f$ {\cal U} \f$ to be the speed of the outer wall \f$
R \, \Omega \f$. The time scale \f$ {\cal T} \f$ is chosen to be \f$
{\cal L}/{\cal U} \f$ so that the Strouhal number is equal to one.
We choose an aspect ratio of \f$ H = 1.4 R \f$ and therefore our
domain \f$ D \f$ is defined to be
\f[
D = \{ r \in [0.0,1.0], \; z \in [0.0,1.4] \}.
\f]
The governing equations are subject to the Dirichlet boundary
conditions
\f[
u_r = 0, \qquad u_z = 0, \qquad u_\theta = r
\f]
on the bottom, right and top boundaries and 
\f[
u_r = 0, \qquad u_\theta = 0
\f]
on the left boundary, \f$ r=0 \f$. The \f$ z \f$-component of the
velocity on this boundary is traction-free, which corresponds to the
symmetry condition \f$ \partial u_z /\partial r = 0 \f$.

<HR>
<HR>

\section results Results

The figure below shows contour plots of the azimuthal
velocity component and the pressure distribution with superimposed
streamlines, taken from <A HREF="../figures/spin_up_stream.avi">an animation of the flow field</A>,
computed with axisymmetric Taylor-Hood elements for the parameters \f$
Re = Re \, St = 5.0 \f$

@I w 0.75\textwidth spin_up_stream "Plot of the azimuthal velocity and pressure fields. " 

The figure below shows carpet plots of all three velocity components
and the pressure, taken from <A HREF="../figures/spin_up_carpet.avi">another animation of the flow field</A>,
computed with axisymmetric Taylor-Hood elements for the parameters \f$
Re = Re \, St = 5.0 \f$

@I w 0.75\textwidth spin_up_carpet "Plot of the velocity and pressure fields. " 

<HR>
<HR>

\section namespace Global parameters and functions

The Reynolds number and the Womersley number (the product of the
Reynolds and Strouhal numbers) are needed in this problem. As usual,
we define them in a namespace: 

\dontinclude spin_up.cc
\skipline start_of_namespace
\until End of namespace

<HR>
<HR>

\section main The driver code

We start by specifying the (non-dimensional) length of time we want to
run the simulation for and the size of the timestep. Because all driver
codes are run as part of \c oomph-lib's self-testing routines we allow
the user to pass a command line argument to the executable which sets
the maximum time to some lower value.

\skipline start_of_main
\until t_max = 0.02

Next we specify the dimensions of the mesh and the number of elements
in the radial and azimuthal directions.

\skipline Number of elements in radial (r) direction
\until l_z

We build the problem using \c
RefineableAxisymmetricQTaylorHoodElements and the \c BDF<2>
timestepper, before calling \c unsteady_run(...). This function solves
the system at each timestep using the \c 
Problem::unsteady_newton_solve(...) function before documenting the result.

\skipline RefineableAxisymmetricQTaylorHoodElements
\until }

We then repeat the process with \c
RefineableAxisymmetricQCrouzeixRaviartElements.

\skipline RefineableAxisymmetricQCrouzeixRaviartElements
\until End of main

<HR>
<HR>

\section problem The problem class

The \c Problem class for our unsteady axisymmetric Navier--Stokes
problem is very similar to that used in the <A HREF="../../../navier_stokes/rayleigh_channel/html/index.html">Rayleigh channel example</A>.
We specify the type of the element and the type
of the timestepper (assumed to be a member of the \c BDF family) as
template parameters, and pass the number of elements and domain
length in both coordinate directions to the problem constructor. We
define an empty destructor, functions to set the initial and boundary
conditions and a post-processing function \c doc_solution(...),
which will be used by the timestepping function \c unsteady_run(...).

\dontinclude spin_up.cc
\skipline start_of_problem_class
\until dir_name

Next we define an access function to the specific \c Mesh:

\skipline Access function for the specific mesh
\until }

We reset the boundary conditions before each solve by overloading 
\c Problem::actions_before_newton_solve(). This is to ensure that
all newly-created nodes are given the correct boundary conditions.

\skipline private
\until actions_after_newton_solve

In Navier--Stokes problems in which the velocity is prescribed along
the entire domain boundary, the pressure is only determined up an
arbitrary constant, making it necessary to "pin" one pressure
value. If the pinned pressure degree of freedom is associated with
an element that is unrefined during the mesh adaptation, the pinned
degree of freedom may no longer exist in the adapted problem. We
therefore use the function \c Problem::actions_after_adapt() to
ensure that precisely one pressure degree of freedom is pinned when
re-solving the adapted problem. Additionally, the possible presence
of hanging nodes in an adapted mesh requires special treatment for
elements (e.g. Taylor-Hood elements) in which the pressure is
represented by a low-order  interpolation between a subset of the
element's nodal values. The function \c
AxisymmetricNavierStokesEquations::pin_redundant_nodal_pressures(...)
performs the required tasks. The technical details of these functions
are discussed in detail in an <A HREF="../../../navier_stokes/adaptive_driven_cavity/html/index.html">earlier tutorial</A>.

\skipline After adaptation
\until End of actions_after_adapt

Finally, we provide a helper function
\c fix_pressure(...) which pins a pressure value in a specified element
and assigns a specific value.

\skipline Fix pressure in element
\until End of problem class

<HR>
<HR>

\section constructor The problem constructor

We start by building the timestepper, determining its type from the
class's second template argument, and pass a pointer to it to 
the problem, using the function \c Problem::add_time_stepper_pt(...).

\skipline start_of_constructor
\until add_time_stepper_pt

Next we build the adaptive mesh and specify an error estimator, which
will be used to guide the automatic mesh adaptation. We pass this to
the mesh, set the maximum refinement level and override the
maximum and minimum permitted errors, which are used to determine
whether or not an element should be refined/unrefined during mesh
adaptation.

\skipline Build and assign mesh
\until min_permitted_error

We pin the radial and azimuthal velocity components on all boundaries,
and the axial component on the three solid boundaries.

\skipline Set the boundary conditions for this problem
\until End of loop over mesh boundaries

We pass the pointers to the Reynolds and Womersley numbers,
\f$ Re \f$ and \f$ Re\, St \f$ , and the pointer to the global time
object (created when we called \c Problem::add_time_stepper_pt(...)
above) to the elements. Because we know that the mesh will remain
stationary we can disable the ALE formulation of the unsteady
equations by calling \c
AxisymmetricNavierStokesEquations::disable_ALE(). This suppresses
the additional computation required to calculate the correction to the Eulerian
time-derivative \f$ \partial u /\partial t \f$ which is required if
the mesh is moving, as discussed in detail in <A HREF="../../../optimisation/html/index.html#ale">another tutorial</A>.

\skipline Complete the problem setup to make the elements fully functional
\until End of loop over elements

Since no traction boundary conditions are
applied anywhere, the pressure is only determined up to an arbitrary
constant. For the reasons discussed above we pin any redundant
pressure degrees of freedom caused by hanging nodes and then ensure a
unique solution by pinning a single pressure value. Finally, we set up
the equation numbering scheme using the function \c
Problem::assign_eqn_numbers().

\skipline Pin redundant pressure dofs
\until End of constructor

<HR>
<HR>

\section set_initial_condition Initial conditions

The function \c set_initial_condition() sets the initial conditions
for the problem by looping over all the nodes in the mesh and setting
all velocity components to zero. No initial conditions are required
for the pressure. We then 
call the function \c Problem::assign_initial_values_impulsive() which
copies the current values at each of the nodes into the required
number of history values for the timestepper in question. This
corresponds to an impulsive start, as for all time \f$ t \leq 0 \f$
the fluid is at rest. At the first
timestep, the solid domain boundaries are immediately moving with a speed
corresponding to their radial distance from the symmetry boundary.
\c Problem::set_initial_condition() is called after each mesh adaptation on
the first timestep only. This means that any newly-created nodes
obtain their values from the actual (analytical) initial
conditions rather than from interpolation of the values of
previously-existing nodes.

\skipline start_of_set_initial_condition
\until End of set_initial_condition

<HR>
<HR>

\section set_boundary_conditions Boundary conditions

The function \c set_boundary_conditions() sets the boundary conditions
for the problem. On the three solid boundaries (\f$ r = 1.0 \f$, \f$ z
= 0.0 \f$ and \f$ z = 1.4 \f$) we set the radial and axial velocities
to zero so that there is no penetration of the wall by the fluid or
flow along it. To simulate the domain rotating around the axis \f$ r =
0 \f$ we set the azimuthal velocity at each node along these
boundaries to be equal to the radial position of the node. On the
symmetry boundary (\f$ r = 0 \f$) we set the radial and azimuthal
velocities to zero but leave the axial component unconstrained. As
discussed  <A HREF="#equations">above</A>, not applying
a velocity boundary condition causes the flow to satisfy the "traction
free" natural boundary condition; in this case, \f$ t_z = 0 \f$. This
corresponds to the symmetry condition \f$ \partial u_z /\partial r = 0 \f$.

\skipline start_of_set_boundary_conditions
\until End of set_boundary_conditions

<HR>
<HR>

\section doc Post-processing

As expected, this member function documents the computed
solution. We first print the value of the current time to the screen,
before outputting the computed solution.

\skipline start_of_doc_solution
\until End of doc_solution

<HR>
<HR>

\section timestepping The timestepping loop

The function \c unsteady_run(...) is used to perform the timestepping
procedure. We start by creating a \c DocInfo object to store the
output directory and the label for the output files.

Before using any of \c oomph-lib's timestepping functions, the timestep
\f$ dt \f$ must be passed to the problem's timestepping routines by calling
the function \c Problem::initialise_dt(...) which sets the weights for
all timesteppers in the problem. Next we assign the initial conditions
by calling \c Problem::set_initial_condition(), which was discussed
<A HREF="#set_initial_condition">above</A>.

\skipline Initialise timestep
\until set_initial_condition

We define the maximum number of spatial adaptations which are
permitted per timestep, and refine the mesh uniformly twice.

\skipline Maximum number
\until refine_uniformly()

We determine the number of timesteps to be performed and document the
initial conditions. A flag, \c first_timestep, is initialised and set
to true. This flag will be passed to \c
Problem::unsteady_newton_solve(...), and when set to true instructs the
code to re-assign the initial conditions after every mesh adaptation.

\skipline Determine number of timesteps
\until first_timestep

A key feature of this problem is the fact that the flow field
approaches a "trivial" solution (rigid body rotation) which can be
fully-resolved by the discretisation. In that case, equidistribution
of the error (normalised by the norm of the global error which tends
to zero!) leads to strong uniform mesh refinement despite the fact
that the solution is fully converged. To avoid this, we prescribe a
constant reference flux to normalise the error. For more details, see
the discussion in the <A HREF="../../../the_data_structure/html/classoomph_1_1Z2ErrorEstimator.html">\c Z2ErrorEstimator class reference</A>.

\skipline Specify normalising factor explicitly
\until reference_flux_norm()

Finally, we perform the actual timestepping loop. For each timestep
the function \c unsteady_newton_solve(dt) is called and the solution
documented.

\skipline Timestepping loop
\until End of unsteady_run

<HR>
<HR>

\section comments Comments and Exercises

\subsection good_practice_bcs Good practice: Assigning boundary conditions

In our driver code we reset the boundary conditions for the problem
before each Newton solve. This is done to ensure that any
new boundary nodes created during mesh refinement are explicitly given
the correct boundary conditions. However, the function that actually
creates the new nodes, \c RefineableQElement<2>::build(...),
automatically assigns new nodes with values by interpolating within the father
element. Since in our case the boundary conditions are linear, there
is in fact no need to reset them at any point during
the simulation, as the new boundary nodes were already given precisely the
correct values by interpolation. Resetting the boundary conditions is
only strictly necessary, therefore, in cases where:

-# The boundary conditions are given by a function which is of higher
   order than the shape functions used by the finite element, or
-# The boundary conditions are time-dependent.

\subsection good_practice_ics Good practice: Assigning initial conditions

Similarly, we repeatedly call the \c set_initial_condition() function
after each mesh adaptation during the first timestep. This is done to
ensure that the exact initial conditions are given to newly created
nodes during mesh refinement. Again, this is not strictly necessary in our
case since \c RefineableQElement<2>::build(...) provides newly-created
nodes with history values which are computed by interpolation of the
history values stored at the nodes of the father element. Our initial
conditions are constant and can therefore be represented exactly by
this procedure. Should the initial conditions be given by an
analytical function of higher order than the shape functions used by
the finite elements, however, it would indeed be necessary to explicitly
provide newly-created nodes with the exact initial conditions during
the first timestep. For a more in-depth discussion, see <A HREF="../../../unsteady_heat/two_d_unsteady_heat_adapt/html/index.html#spatial_adapt">another tutorial</A>.

<center>
<b>A slight subtlety</b>
</center>

Omitting the re-assignment of the initial conditions on the
adapted mesh when performing the first timestep does have a subtle
effect that we encourage you to explore in the exercises below.
You will observe that the solution obtained when re-assigning
the initial conditions differs <b>very</b> slightly
from that obtained when this step is suppressed. This obviously seems to
contradict the statements made above and requires some explanation.

To understand why the behaviour is not unexpected (and perfectly acceptable!)
let us analyse in more detail what really happens when we compute the first
timestep in a spatially adaptive computation. When we perform
the first Newton solve on the original mesh, the history values
(which, for a BDF timestepper, represent the solution at previous
timesteps) are identically equal to zero. The current values are
also zero but this has no particular significance -- they simply
provide the initial guess for the solution at the advanced time
level and their values are subsequently updated by the Newton solver.

Following the convergence of the Newton solver, the history values
will therefore have retained their original values (zero) while
the current values will have been updated to represent the "correct"
solution of the nonlinear problem at the next timestep (on the current
mesh). The accuracy of this solution is now assessed by the spatial
error estimator. If the estimated error is deemed too large, the mesh
is adapted and all quantities (history values <b>and</b> current
values) are automatically transferred onto the new mesh by
interpolation -- exactly as discussed above. Interpolation of the
(identically equal to zero) history values onto the new mesh assigns
zero history values for all newly-created nodes -- exactly what
we (needlessly) do in our own implementation of
\c Problem::set_initial_conditions(). The interpolation of the current
values transfers what is our current
"best guess" for the solution at the advanced time onto the new mesh.
In principle, this provides a "better" initial guess for the solution
at the advanced time level than the zero initial guess that we
re-assign when we call \c Problem::set_initial_conditions() but (as
long as the Newton iteration converges) this assignment is irrelevant.
However, starting the Newton iteration from a different
initial guess will almost certainly lead to a slightly different solution -- a
solution being defined as a(ny) set of current values for which the maximum
residual in the \c Problem's residual vector is less than the
required tolerance. Hence, even though omitting or performing the re-assignment
of the initial conditions leads to two <b>slightly</b> different
solutions, both solutions are equally acceptable (within the threshold
that is implicit in our convergence criterion for the Newton iteration). 

\subsection exercises Exercises

-# Remove the function \c set_initial_condition() entirely from the
   driver code (do not just leave it empty!), so that the initial
   conditions are not constantly reset during the first timestep.
   Confirm that the code still produces approximately (but not
   precisely) the same results, as discussed in the <A HREF="#good_practice_ics">previous section</A>.
-# Restore \c set_initial_condition() to  its original state, but
   remove the call to \c assign_initial_values_impulsive(). Confirm
   that the code still produces precisely the same results. Why are
   exactly the same results produced this time?

<HR>
<HR>

\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/axisym_navier_stokes/spin_up/">
demo_drivers/axisym_navier_stokes/spin_up/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/axisym_navier_stokes/spin_up/spin_up.cc">
demo_drivers/axisym_navier_stokes/spin_up/spin_up.cc
</A>
</CENTER>
.
