/**

\mainpage Mesh generation based on Triangle

In this document we demonstrate how to generate unstructured
triangular meshes for \c oomph-lib, based on the output from 
<A HREF="http://www.cs.berkeley.edu/~jrs/">Jonathan Shewchuk's</A>
open-source mesh generator 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle.</A>
The mesh generation is performed in a two-stage process.
First we use <A HREF="http://www.cs.cmu.edu/~quake/triangle.html">
\c Triangle </A> to generate the mesh "offline". Then we
process the output files generated by  
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> \c Triangle </A>
to generate an \c oomph-lib mesh. 
 
You should also consult 
<A HREF="../../../../doc/meshes/mesh_from_inline_triangle/html/index.html">
another tutorial</a> where we discuss how to generate (and adapt) unstructured
meshes from within \c oomph-lib driver codes.

<HR>
<HR>

\section triangle_use Quick Guide for the use of Triangle

The <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> \c Triangle
home page</A> contains a comprehensive User's Guide for the
code and its many options, therefore we only present a brief
overview of the code's most basic usage.
 

<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A> creates the mesh based on the information
about the mesh boundaries provided in an input file, 
\c filename.poly, say. By default, three output files, 
\c filename.1.poly, \c filename.1.node, and \c filename.1.ele
are created. They contain the information about the polygonal 
mesh boundaries, the nodal positions and the element connectivity
lists, respectively.

<HR>


\subsection input The input file format
The input file for <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A>  (usually a file with the extension \c *. \c poly)
has the following format: 

<TABLE>
<TR>
<TD>
\b Nodes:

First line:      [number of vertices] [dimension (must be 2)]
[number of attributes for nodes] [number of boundary markers for nodes (0 or 1)] \n
Following lines:  [vertex index] [x] [y] [[attributes]] [[boundary
marker]] \n

\b Segments:

One line:         [number of segments] [number of boundary markers for
segments (0
or 1)] \n
Following lines:  [segment index] [endpoint] [endpoint] [[boundary
marker]] \n

\b Holes:

One line:         [number of holes]  \n
Following lines:  [hole index] [x] [y]  \n

</TD>
</TR>
</TABLE>

\b Comments:
- The data between [ ] must be provided.
 
- The attributes and  boundary markers (i.e. data surrounded by [[ ]] )
  must only be specified if the 
  corresponding number of boundary markers and the number of 
  attributes specified at the beginning of the relevant block is 
  nonzero. 

- The "segments" define boundary edges, i.e. exterior boundaries and 
  boundaries of holes. All boundary edges should be specified as segments, 
  otherwise \c Triangle may triangulate regions that
  are not part of the domain.  

- Boundary markers should be used to identify which nodes are located
  on which domain boundaries. If domain boundaries are to be 
  identified (this is strongly recommended as \c oomph-lib driver
  codes tend to require this information to apply boundary
  conditions), the number of boundary markers should be set to 1,
  otherwise it must be set to zero. 

- If the number of boundary markers is set to 1, boundary markers must 
  be specified for every node or segment. To be consistent
  with \c oomph-lib's (zero-based) boundary numbering schemes,
  a boundary marker 0 should be used for nodes that are not located 
  on domain boundaries; a boundary marker \c b+1 should be 
  used to indicate that a node is located on the mesh boundary \c b 
  in the final \c oomph-lib mesh. 

- \c oomph-lib does not currently use the "attributes" so their 
  number should be set to zero. [\b Note: The attributes are likely
  to be used to define boundary coordinates in future releases
  of \c oomph-lib.] 

- If a node is located on multiple boundaries, 
  <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
  \c Triangle </A> assigns the boundary marker 
  for the node arbitrarily. 

- It is important to specify the boundary markers via the segments
  rather than the nodes if the mesh contains multiple boundaries.

- Each hole is identified by the coordinates of a single point in its
  interior.

- Blank lines and comments prefixed by `#' may be placed anywhere. 

- Input files for \c Triangle may contain optional additional lines
  which specify, e.g. area constraints. See the  
  <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
  \c Triangle home page</A> for further information.
.

<HR>

\subsection run_triangle How to run Triangle

To create the mesh from a given input file the command is 

\code
./triangle filename.poly
\endcode

If the domain contains a hole the argument \c -pc must be added, i.e.

\code
./triangle -pc filename.poly 
\endcode

With these commands, \c Triangle will generate as few triangles
as possible. Finer meshes may be generated by imposing additional
constraints via command line arguments. For instance:
- A maximum triangle area can be specified with
  <CODE>-a</CODE><EM>n</EM> where <EM>n</EM> is the maximum permitted area.
  (There is no space between \c -a and the number specifying the area!)
- A minimum angle for the triangles can be specified with
   \c -q to avoid angles smaller than 20 degree or 
   <CODE>-q</CODE><EM>n</EM> where <EM>n</EM> is the minimum permitted angle.
- ...
.
Again, we refer to the  
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle home page</A> for a comprehensive listing of all 
available options. 

When run with an input file \c filename.poly, 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A>  generates output files called 
\c filename.1.node,  \c filename.1.ele and \c filename.1.node
which can be processed to generate an \c oomph-lib mesh.

<HR>

\subsection showme How to visualise a mesh generated by Triangle

To visualise the mesh, the program \c showme (distributed with
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A> ) can be used. 

<HR>
<HR>

\section example An example: A rectangle with a hole

To illustrate the procedure, we demonstrate how to generate
a mesh for the rectangular domain with a hole shown in the
figure below. The domain is defined by two boundary segments,
each of which connect four points. Note that the node and boundary
numbers correspond to those in the 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> \c Triangle </A> 
input file. In the corresponding \c oomph-lib mesh, the boundaries are 
numbered from zero.

\image html box_hole.gif "A rectangular domain with a rectangular hole. " 
\image latex box_hole.eps "A rectangular domain with a rectangular hole. " width=0.75\textwidth

The input file, \c box_hole.poly, for this domain is:
\include box_hole.poly
 
When run as <CODE>
./triangle -pc -a0.1 -q35 box_hole.poly </CODE> 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> \c Triangle </A>
creates the output files  
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/box_hole.1.node">
box_hole.1.node</A>
and  
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/box_hole.1.ele">
box_hole.1.ele</A>
and
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/box_hole.1.poly">
box_hole.1.poly</A>.
Here is a sketch of the resulting triangulation, 
as displayed by \c showme :

\image html showme_screenshot.gif "Screenshot of showme, showing the triangulation of the rectangular domain with a hole. " 
\image latex showme_screenshot.eps "Screenshot of showme, showing the triangulation of the rectangular domain with a hole. " width=0.75\textwidth


<HR>
<HR>

\section oomph_use Creating an oomph-lib mesh based on output files generated by Triangle

\c oomph-lib provides a mesh, \c TriangleMesh, that uses the 
output from <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A> to generate an \c oomph-lib Mesh containing 
elements from the \c TElement<2,NNODE_1D> family of the triangular
elements. The relevant interface is: 

\dontinclude triangle_mesh.template.h
\skipline start_of_triangle
\until Default_TimeStepper

<HR>
<HR>


\subsection poisson Example 1: A Poisson problem

The driver code <A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/mesh_from_triangle_poisson.cc">mesh_from_triangle_poisson.cc</A>
demonstrates the  use of this mesh for the solution of a
2D Poisson problem in the "rectangular domain with a hole",
described in the previous section.

The code expects the names of \c *.\c node, *.\c ele and *.\c poly files
generated by <A HREF="http://www.cs.cmu.edu/~quake/triangle.html"> 
\c Triangle </A> as command line arguments and stores them 
in the namespace \c CommandLineArgs 

\dontinclude mesh_from_triangle_poisson.cc
\skipline int main
\until }

The names of these files are then passed to the mesh constructor. 
Since the rest of the  <A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/mesh_from_triangle_poisson.cc">driver
code </A> is identical to that in the
<A HREF="../../../../doc/poisson/two_d_poisson/html/index.html">
corresponding example with a structured mesh</A>, 
we do not provide a detailed listing but simply show the plot of the 
computed results, together with the tanh-shaped exact
solution of the problem:

\image html sol_box.gif "Computed and exact solutions. " 
\image latex sol_box.eps "Computed and exact solutions. " width=0.75\textwidth

<HR>
<HR>

\subsection nst Example 2: A Navier-Stokes problem

The driver code <A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/mesh_from_triangle_navier_stokes.cc">mesh_from_triangle_navier_stokes.cc</A>
demonstrates the use of a \c TriangleMesh for the solution of
a 2D Navier-Stokes problem. The file  
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/flow_past_box.poly">
flow_past_box.poly</A> describes a slightly longer box-shaped domain
with a hole -- representing a 2D channel with an obstruction. 
In this example the four straight line segments that bound the outer 
box are given  distinct boundary numbers to allow the application of different 
boundary conditions at the inflow, the outflow, and on the
upper and lower no-slip walls. 

Here is the mesh, generated by 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle </A>

\image html box_flow_mesh.gif "Unstructured mesh for the channel flow problem. " 
\image latex box_flow_mesh.eps "Unstructured mesh for the channel flow problem. " width=0.75\textwidth

...and here is a plot of the flow field (velocity vectors, 
streamlines and pressure contours) computed with 2D 
triangular Taylor-Hood elements:

\image html box_flow.gif "Finite Reynolds number flow in a 2D channel with a rectangular obstacle. " 
\image latex box_flow.eps "Finite Reynolds number flow in a 2D channel with a rectangular obstacle. " width=0.75\textwidth


<HR>
<HR>


\section comments Comments and Exercises

\subsection check Checking the boundary numbers
We re-iterate that 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle </A>
does not allow nodes to be located on multiple boundaries. It is
therefore important to check the boundary numbers allocated by
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle </A>,
e.g. by using the function \c Mesh::output_boundaries(...). Boundary
nodes should always be placed on the boundary with the most 
restrictive boundary conditions. If this is not possible,
some post-processing of the mesh may be required.


\subsection elements Higher-order triangles
Currently, \c TriangleMesh can be used to generate
three, six and ten-node triangles (i.e. triangles with bi-linear,
bi-quadratic and bi-cubic shape functions). The generation of
ten-node triangles is currently performed somewhat inefficiently 
and a warning is issued. Developing a more efficient implementation
should be straightforward and you are invited to perform this
as an exercise.



\subsection ex Exercises
-# Download and install
   <A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle, </A>
   and create your own meshes.
-# Experiment with the options that allow the specification of 
   maximum areas and minimum angles.




<HR>
<HR>


\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/">
demo_drivers/meshing/mesh_from_triangle/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/meshing/mesh_from_triangle/mesh_from_triangle_poisson.cc">
demo_drivers/meshing/mesh_from_triangle/mesh_from_triangle_poisson.cc
</A>
</CENTER>
.

<hr>
<hr>
\section pdf PDF file
A <a href="../latex/refman.pdf">pdf version</a> of this document is available.
**/

