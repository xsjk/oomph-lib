/**

\mainpage Mesh generation based on Tetgen

In this document we demonstrate how to generate unstructured
tetrahedral meshes for \c oomph-lib, based on the output from 
<A HREF="http://www.wias-berlin.de/~si ">Hang Si's</A>
open-source mesh generator 
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>.
The mesh generation is performed in a two-stage process.
First we use <A HREF="http://wias-berlin.de/software/tetgen//">
\c Tetgen </A> to generate the mesh "offline". Then we
process the output files generated by  
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>
to generate an \c oomph-lib mesh. 




<HR>
<HR>

\section Tetgen_use Quick guide for the use of Tetgen

The <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen home page </A> 
contains a comprehensive User's Guide for the
code and its many options, therefore we only present a brief
overview of the code's most basic usage.


<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A> 
creates the mesh based on the information
about the mesh boundaries provided in an input file, 
\c filename.poly, say. By default, three output files, 
\c filename.1.node, \c filename.1.ele, and \c filename.1.face
are created. They contain the information about the nodal positions, 
the element connectivity lists and the boundary faces respectively.

<HR>


\subsection input The input file format
The input file for <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A> 
usually has the extension \c *.\c poly and has the following format: 

<TABLE>
<TR>
<TD>


<B>  Node list </B>

First line: [number of nodes] [dimension (must be 3)] [number of
attributes] [number of boundary markers (0 or 1)] \n
Remaining lines: [node index] [x] [y] [z] [[attributes]] [[boundary
marker]] \n

<B> Facet list </B>

One line: [number of facets] [boundary markers (0 or 1)] \n
Following lines are a list of the facets: [facet index] \n
     where each facet has the following format: \n
          One line: [number of polygons] [[number of holes]]
          [[boundary marker]] \n
          Following lines: [number of corners] [corner 1] [corner 2]
          ... [last corner] \n
          Following lines: [hole index] [x] [y] [z] \n

<B>  Hole list </B>

One line: [number of holes] \n
Following lines: [hole index] [x] [y] [z] 

<B>  Region attributes list </B>

One line: [number of region] \n
Following lines: [region index] [x] [y] [z] [region number] [region attribute]


</TD>
</TR>
</TABLE>

\b Comments:
- The data between [ ] must be provided. The attributes and 
boundary markers must only be specified if the corresponding number of boundary
markers or the number of attributes is nonzero. 
\n \n
- Boundary markers can be used to identify which nodes are located
on which domain boundaries. If domain boundaries are to be 
identified the number of boundary markers should be set to 1,
otherwise it must be set to zero. If the number of boundary
markers is set to 1, boundary markers must be specified for
every node and facet. A boundary marker 0 should be used for
nodes that are not located on domain boundaries; a boundary
marker \c b+1 should be used to indicate that a node is located 
on the mesh boundary \c b in the final \c oomph-lib mesh. 


- \c oomph-lib does not use the "attributes" so their number should be
set to zero.

- The boundary markers have to be specified in the node list AND in the
facet list.

- If a node is located on multiple  boundaries, the boundary marker 
of the node is chosen arbitrarily. 

- Holes are identified by the coordinates of a single point in their
interior. The holes in the facet list are holes in the facet, they are
different from the holes in the hole list, which are holes in the volume.

See the <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen home page </A>  for further information.


<HR>

\subsection run_Tetgen How to run Tetgen

To create the mesh from a given input file the command is 
\code
./tetgen filename.poly
\endcode

With these commands, <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A> will generate as few tetrahedra
as possible. Finer meshes may be generated by imposing additional
constraints via command line arguments. For instance
- A maximum tetrahedron volume can be specified with
  <CODE>-a</CODE><EM>n</EM> where <EM>n</EM> is the maximal volume wanted.
  (There is no space between \c -a and the number specifying the volume!)
- ...

Again, we refer to the  
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen home page </A> 
for a comprehensive listing of all available options.


<HR>



\subsection tetview How to visualise a mesh generated by Tetgen

To visualise the mesh, the program \c tetview (distributed with
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>) can be used. 

<HR>

\section example An example: A cube with a cube hole

To illustrate the procedure, we demonstrate how to generate
a mesh for the cube domain with a hole shown in the
figure below. Note that the node
numbers correspond to those in the 
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>
input file. Boundary 1 is shown in blue; boundary
2 in magenta. In the corresponding \c oomph-lib mesh, the boundaries are 
numbered from zero.

\image html cube_hole.gif "the cube with a hole domain " 
\image latex cube_hole.eps "the cube with a hole domain " width=0.75\textwidth

Here is a listing of the corresponding input file, \c cube_hole.poly:

\include cube_hole.poly
 
The output files that <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen 
</A> creates with the command
\code
./tetgen  -a0.2 cube_hole.poly 
\endcode
 are <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/cube_hole.1.node">cube_hole.1.node</A>
, <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/cube_hole.1.ele">cube_hole.1.ele</A>
and <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/cube_hole.1.face">cube_hole.1.face</A>.

Here is a sketch of the resulting discretisation, as displayed by \c tetview : 

\image html tetview_screenshot.gif "Cut plane of the tetrahedral mesh. " 
\image latex tetview_screenshot.eps "Cut plane of the tetrahedral mesh. " width=0.75\textwidth


<HR>

\section oomph_use Creating an oomph-lib mesh based on output files generated by Tetgen

\c oomph-lib provides a mesh, \c TetgenMesh, that uses the 
output from <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A> 
to generate an unstructured \c oomph-lib Mesh containing 
elements from the \c TElement<3,NNODE_1D> family of the tetrahedral
elements. The relevant interface is:

\dontinclude tetgen_mesh.template.h
\skipline start of Tetgen
\until Default_TimeStepper


<HR>
<HR>


\subsection poisson Example 1: A Poisson problem

The driver code <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/mesh_from_tetgen_poisson.cc">mesh_from_tetgen_poisson.cc</A>
demonstrates the  use of this mesh for the solution of a
3D Poisson problem in the "cube domain with a hole",
described in the previous section.

The code expects the names of \c *.\c node, *.\c ele and *.\c face files
generated by <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>
as command line arguments and stores them 
in the namespace \c CommandLineArgs 

\dontinclude mesh_from_tetgen_poisson.cc
\skipline int main
\until }

The names of these files are then passed to the mesh constructor. 
Since the rest of the  <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/mesh_from_tetgen_poisson.cc">
driver code </A> is identical to that in the 
<A HREF="../../../../doc/poisson/eighth_sphere_poisson/html/index.html">
corresponding example with a structured mesh</A>, 
we do not provide a detailed listing but simply show the plot of the 
computed results, together with a plot of the exact solution, for
linear (four-noded) elements


\image html compare_linear.gif "FE and exact solution with linear elements. " 
\image latex compare_linear.eps "FE and exact solution with linear elements. " width=0.75\textwidth
...and quadratic (ten-noded) elements:

\image html compare_quadratic.gif "FE and exact solution with quadratic elements. " 
\image latex compare_quadratic.eps "FE and exact solution with quadratic elements. " width=0.75\textwidth

<HR>
<HR>

\subsection nst Example 2: A Navier-Stokes problem
 
The driver code <A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/mesh_from_tetgen_navier_stokes.cc">mesh_from_tetgen_navier_stokes.cc</A>
demonstrates the use of a \c TetgenMesh for the solution of
a 3D Navier-Stokes problem in the same geometry as in the previous
example. We apply no-slip boundary conditions on the 
central hole and impose a unit vertical velocity. On the outer
boundaries we pin the \f$ y \f$ and \f$ z \f$ velocity components and 
set them to zero, while leaving the axial velocity unspecified. The resulting
flow field, shown in the figure below, corresponds to the flow
that is generated when the rigid block in the centre of the domain
rises vertically inside a rigid duct with "slippery walls". 
The duct is open at the ends \f$ x=const\f$, where 
parallel, axially-traction free outflow is imposed.
The various slices show pressure contours and the in-plane velocity vectors.
 
\image html flow.gif "Flow in a duct with slippery walls, driven by the vertical motion of the central block. " 
\image latex flow.eps "Flow in a duct with slippery walls, driven by the vertical motion of the central block. " width=0.75\textwidth


<HR>
<HR>

\section comments Comments and Exercises

\subsection check Checking the boundary numbers
We re-iterate that 
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A> 
does not allow nodes to be located on multiple boundaries. It is
therefore important to check the boundary numbers allocated by
<A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen </A>,
e.g. by using the function \c Mesh::output_boundaries(...). Boundary
nodes should always be placed on the boundary with the most 
restrictive boundary conditions. If this is not possible,
some post-processing of the mesh may be required.

\subsection elements Higher-order tets
Currently, \c TetgenMesh can only be used to generate
four and ten-node tets (i.e. tets with tri-linear and tri-quadratic
shape functions). It should be easy to generalise the 
"scaffold-mesh"-based mesh generation procedure to higher-order
elements but this has not been done yet. Any volunteers?


\subsection ex Exercises
-# Download and install
   <A HREF="http://wias-berlin.de/software/tetgen//"> \c Tetgen, </A>,
   and create your own meshes.
-# Experiment with the options that allow the specification of 
   maximum element volumes etc.
.


<HR>
<HR>


\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/">
demo_drivers/meshing/mesh_from_tetgen/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/meshing/mesh_from_tetgen/mesh_from_tetgen_poisson.cc">
demo_drivers/meshing/mesh_from_tetgen/mesh_from_tetgen_poisson.cc
</A>
</CENTER>
.





<hr>
<hr>
\section pdf PDF file
A <a href="../latex/refman.pdf">pdf version</a> of this document is available.
**/

