/**

\mainpage Unstructured 2D Delaunay mesh generation with xfig and Triangle

In this document we demonstrate how to use \c oomph-lib's
conversion routine \c fig2poly (a C++-based stand-alone executable,
generated from the source code 
<A HREF="../../../../demo_drivers/meshing/mesh_from_xfig_triangle/fig2poly.cc">fig2poly.cc</A>
to create \c *.\c poly files for <A HREF="http://www.cs.berkeley.edu/~jrs/">
Jonathan Shewchuk's</A> open-source mesh generator 
<A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle
</A>, based on the output from the open-source 
drawing program <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig.</A> 
 
<HR>
<HR>

\section xfig_input Mesh generation with xfig, fig2poly and Triangle

Mesh generation with <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A>, \c
fig2poly and <A HREF="http://www.cs.cmu.edu/~quake/triangle.html">\c Triangle
</A> is extremely straightforward.

-# Draw the (piecewise linear) domain boundaries, using 
   <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig's</A> polyline
   drawing tool. Each polyline represents a distinct mesh
   boundary. The start and end points of the polyline
   should not coincide -- \c fig2poly
   will automatically "fill in" the missing line segment.
   \n\n
-# If the domain has any holes, place a single circle
   (drawn with <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig's</A> 
   circle/ellipse drawing tool) into each hole. Use the
   circle/ellipse drawing tool that requires
   the specification of the radius. The radius of the circle is 
   irrelevant.
   \n\n
-# Save the figure as a \c *. \c fig file. 
   \n\n
-# Use \c fig2poly to convert the \c *. \c fig file into a \c *. \c
   fig. \c poly file. For instance,
   \code 
   ./fig2poly some_figure.fig
   \endcode
   will generate a file \c some_figure.\c fig. \c poly. \n\n
-# Process the \c *. \c fig. \c poly file produced by \c fig2poly with 
   <A HREF="http://www.cs.cmu.edu/~quake/triangle.html">Triangle</A> 
   and use the resulting \c *.poly, \c *.ele and
   \c *.node files as input to \c oomph-lib's \c TriangleMesh,
   as described in <A HREF="../../mesh_from_triangle/html/index.html">
   another example.</A> \n\n
-# Done! 
.

\subsection xfig_comments Comments:
 
- \c fig2poly expects the 
  <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A> output file to conform
  to "Fig format 3.2" and checks for the presence of the string 
  "#FIG 3.2" in the first line of the \c *. \c fig file. 
  below. 
  \n\n
- The figure must contain only polylines and circles. The presence
  of any other objects will spawn an error message and cause \c fig2poly
  to terminate.
  \n\n
- The figure must not contain any "compound objects". 
  Compound objects may, of course, be used while drawing but
  you should break them up before saving the figure. 
  \n\n
.


<HR>
<HR>

\section hole_poisson Example 1: Solution of Poisson's equation on a rectangular domain with a hole

Here is a screen shot from an xfig session. The figure defines
a quadrilateral domain with a quadrilateral hole. 

\image html hole_screen_shot.gif "Screen shot of xfig session. " 
\image latex hole_screen_shot.eps "Screen shot of xfig session. " width=0.75\textwidth


Here is a plot of the resulting mesh. It was generated by converting the 
file \c hole.fig generated by xfig, to \c hole.fig.poly, using
\c fig2poly and processing the resulting file with

\code
triangle -pq -a0.02 hole.fig.poly
\endcode

 
\image html hole_mesh.gif "The mesh. " 
\image latex hole_mesh.eps "The mesh. " width=0.75\textwidth

Finally, the figure below shows a plot of the computed solution 
of a Poisson equation with a unit source function, obtained 
with three-noded (red) and six-noded (green) triangular Poisson 
elements:

\image html hole_poisson.gif "Solution of Poisson's equation on the mesh generated from the xfig output. " 
\image latex hole_poisson.eps "Solution of Poisson's equation on the mesh generated from the xfig output. " width=0.75\textwidth


This solution was computed with the driver code
<A HREF="../../../../demo_drivers/meshing/mesh_from_xfig_triangle/mesh_from_xfig_poisson.cc">mesh_from_xfig_poisson.cc.</A> 
<HR>
<HR>

\section oomph_nst Example 2: Finite-Reynolds-number flow past the oomph-lib logo

Here is a screen shot from another xfig session. The figure defines
a quadrilateral domain containing the oomph-lib logo whose 
letters create holes in the domain. 

\image html oomph_screen_shot.gif "Screen shot of xfig session " 
\image latex oomph_screen_shot.eps "Screen shot of xfig session " width=0.75\textwidth

Here is a plot of the mesh generated with the same procedure
discussed above.

\image html oomph_mesh.gif "The mesh. " 
\image latex oomph_mesh.eps "The mesh. " width=0.75\textwidth

Finally, the figure below shows a plot of the solution of the 
steady Navier-Stokes equations (velocity
vectors and pressure contours) in this domain. No-slip conditions were
applied on all boundaries. Zero velocities were imposed on 
all boundaries apart from the outer bounding box (boundary 1) where 
we set 
\f[
{\bf u} = 
\left(
\begin{array}{c}
-1 \\
-1
\end{array}
\right).
\f] 
The plot may therefore be interpreted as showing the flow field that is
generated when the rigid quadrilateral box that surrounds the 
oomph-lib logo moves in the north-westerly direction while the logo itself
remains stationary. This was computed with the driver code
<A HREF="../../../../demo_drivers/meshing/mesh_from_xfig_triangle/mesh_from_xfig_navier_stokes.cc">mesh_from_xfig_navier_stokes.cc</A>
which is very similar
to that for the <A HREF="../../../navier_stokes/driven_cavity/html/index.html">
driven cavity problem,</A> so we shall not discuss in in detail. 

\image html oomph_flow.gif "Flow past the oomph-lib logo. " 
\image latex oomph_flow.eps "Flow past the oomph-lib logo. " width=0.75\textwidth


<HR>
<HR>

\section comments Comments and Exercises
\subsection bound Numbering of the mesh boundaries
-# Each polyline in the <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A>-generated 
   figure represents a distinct mesh boundary. \c fig2poly
   assigns boundary numbers to these, depending on the
   order in which the polylines are listed in the \c *. \c fig file.
   Since this is not always obvious, it is usually necessary to 
   examine the mesh boundaries by calling \c
   Mesh::output_boundaries(...) before assigning boundary conditions. 
   \n\n
-# Since boundaries are defined by closed polygons, 
   all nodes that are located on a specific polygon have the
   same boundary number. In cases where a finer sub-division of the
   boundary is required (e.g. to identify inflow boundaries)
   some post-processing of the mesh may be required.
. 
\subsection ex Exercises
-# Download and install <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A> 
   (if you work in a linux environment, <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A> 
   is likely to be available already as it is part of many linux
   distributions) and create your own meshes.
   \n\n
-# Think of a way to modify the <A HREF="http://en.wikipedia.org/wiki/Xfig">xfig</A>-based
   mesh generation procedure so that a closed boundary can contain 
   several sub-boundaries so that in- and outflow boundaries
   can be identified separately. [This is an "advanced" exercise
   and one to which no solution exists as yet -- please let us have
   your code if you find an easy way to do this!]. 
.

   

<hr>
<hr>
\section pdf PDF file
A <a href="../latex/refman.pdf">pdf version</a> of this document is available.
**/

