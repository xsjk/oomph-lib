\mainpage Mesh generation based on Geompack


////////////////////////////////////////////////////////////////
/// THIS IS AN OLD VERSION OF THE DOCUMENTATION IN WHICH ALICE
/// PROVIDED A MORE DETAILED DISCUSSION OF THE INPUT FILES.
/// WE ABANDONED THIS BUT THE INFORMATION MAY STILL BE USEFUL...
////////////////////////////////////////////////////////////////


In this document we demonstrate how to generate \c oomph-lib 
meshes, based on the output from Barry Joe's 
open-source mesh generator 
<A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack </A>.
The mesh generation is performed in a two-stage process.
First we use <A HREF="http://members.shaw.ca/bjoe/index.htm">\c
Geompack </A>  to generate the mesh "offline". Then we
process the output files generated by  
<A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack </A>
to generate an \c oomph-lib mesh. 

<HR>
<HR>

\section geompack_use Quick Guide for the use of Geompack

The files \c meshoper.pdf and \c regmesh.pdf distributed with 
<A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack </A>
contains a comprehensive User's Guide for the
code and its many options, therefore we only present a brief
overview of the code's most basic usage, without considering NURBS curves.
 

<A HREF="http://members.shaw.ca/bjoe/index.htm">\c
 Geompack </A>
 creates the mesh based on the information
about the mesh boundaries provided in two input files, 
\c filename.rg2 and \c filename.cs2, say. An output file, 
\c filename.1.mh2 is created. It contains the information about the 
mesh boundaries, the nodal positions and the element connectivity
lists.

<HR>


\subsection first_input The input region file format
The input region file for 
<A HREF="http://members.shaw.ca/bjoe/index.htm">
<CODE>Geompack</CODE></A>
(usually a file with the extension \c *\c .rg2) contains  information
about the region, it is linked with information in the curve file \c
filename.cs2 and has the following format: 

<TABLE>
<TR>
<TD>

nvc  \n
[x y vertinfo]nvc \n
nvx   \n
[nodecode icurv ucurv]nvx \n
nloop \n
[nv regcode inreg  \n
 v1 v2 ... vnv  \n
 edgeinfo1 edgeinfo2 ... edgeinfonv]nloop  \n

</TD>
</TR>
</TABLE>

\b Comments:

- These 3 groups give information about the vertex coordinates, extra
  information on the vertex and the loops. 
- [...]nvc means there are nvc lines like the one in the bracket.
- nvc is the number of vertices. \n
        - x and y are the coordinates of the vertex (real number) \n
        - vertinfo contains information on the vertex:
          vertinfo=20.xtraptr+vertyp \n
                - xtraptr is the index of the vertex extra info (so an integer) if needed (when a point is located on the interior
                  of a curve), 0 otherwise \n
                -  vertyp is: \n
                1 if an unconstrained vertex (cannot be on the region boundary or on
  a constrained curve) \n
                   2 if a constrained vertex (endpoint of a labelled curve, in the interior of a labelled curve or an
                     interior point that is to be a vertex of the
  mesh) \n
          other figures for vertyp are possible but only these two are used here
- nvx is the number of extra info on the vertex (it is the maximum
  value of the index xtraptr) \n
        - nodecode (positive integer) can be used to specify a load or constraint at a node, 
         0 if not used \n
        - icurv is the label of a curve (see the curve file),
         it's negative if not used \n
        - ucurv is the parameter of the point on the curve, between 0.0 and 1.0, 
         ucurv is outside the interval [0.0,1.0] if not used. \n
- nloop is the number of loops (boundary of simply connected subregion
  or simple hole) \n
        - nv is the number of vertices in the loop, must be superior or
  equal to 2 \n
        - regcode is 0 if the loop is a boundary of a hole
               an integer otherwise \n
        -  inreg is 0 if the loop is an outer boundary,
             strictly positive if it's the boundary of a hole \n
        - vi are the positive labels of vertices on the loop in counter
  clockwise order \n
        - edginfoi is 20*indcurv+edgetyp, with a positive or negative sign \n
                   - indcurv is the index of the labelled curve that the edge
  lies on \n
                   - edgetyp is: \n
                        1 if an unsplittable boundary edge \n
                        2 if a splittable boundary edge \n
                        3 if an unsplittable interior constrained edge \n
                        4 if a splittable interior constrained edge \n
                        5 if an interior unconstrained edge \n
             the sign is plus if v(i)->v(i+1) is in the same direction as the labelled curve,
                         minus otherwise \n


-  See the \c regmesh.pdf file for further information.
.

<HR>
 

\subsection second_input The input curve file format

The input curve file for 
<A HREF="http://members.shaw.ca/bjoe/index.htm"><CODE>Geompack</CODE> 
</A> (usually a file with the extension \c *\c .cs2) contains  information
about the curves, it is linked with information in the region file \c
filename.rg2.
 
There are 3 types of curves: line segment, circular arc and NURBS
curve. Information about NURBS curves aren't given here, see the \c
regmesh.pdf file for further information.

It has the following format: 

<TABLE>
<TR>
<TD>

ncurv \n
[curvrep bndcode \n
 {v1 v2} \n
 {v1 v2 v3} \n
 { ... } \n
 ]ncurv \n

</TD>
</TR>
</TABLE>

\b Comments:

- ncurv is the number of labelled curves (we can label all the curves,
  it's simple)
- [...]ncurv means there are nvc lines like the one in the bracket.
- curvrep is the kind of curv:
        -  1 if a line segment
        -  2 if a circular arc
        -  (3 if a NURBS curve)
- bndcode is the boundary condition code (0 or a positive integer)
- {v1 v2} is used if curvrep=1, they are the index of the endpoints of the segment
- {v1 v2 v3} is used if curvrep=2, v1 and v3 are the index of the endpoints of the arc,
                                   v2 is the index of a point on the interior of the arc
- { ... } is the NURBS information, not studied here.

<HR>



\subsection run_triangle How to run Geompack

To create the mesh from the given input files the command is 

\code
 ./zgp0603_linux filename.m2 filename.out
\endcode

where \c filename.m2 has the format described below and \c filename.out  contains
information of errors during the compiling, it's an output file for
<A HREF="http://members.shaw.ca/bjoe/index.htm">\c
 Geompack </A>.  

\c filename.m2 is an operation file. The generation of a quadrilateral
mesh given a 2D region is named operation 202. The file \c filename.m2 contains
the information about the operation, the input files needed, the name
of the output file,and some parameters. It has the following format:

<TABLE>
<TR>
<TD>

202 1 1 0 0 0 1  \n
filename.rg2 (its address) \n
filename.cs2 (its address) \n
filename.mh2 \n
tolerance 0 0 \n
4 0 45.0 0.04 0.2 30.0 20.0 0.25 0.4 10 n_element ele_type 3 0.1 0 2
0.0 \n  

</TD>
</TR>
</TABLE>

\b Comments:

- 202 is the number of the operation
- Then the six figures shows if the following files are needed (1) or
not (0): \n
  region input file, curve input file, mesh input file, region output file, curve output file, mesh output file. 
- Then the names (in fact address of the input files) of these files
- Then the parameters.I used the recommended figures in the \c
meshoper.pdf file, except for 3 of them:the tolerance, the type of element wanted and the desired number of element in the mesh
        - the tolerance must be inferior to 0.001, it is recommended to put 1.0e-10.
        - n_element is the desired number of elements (it's an approximation)
        - ele_type is the desired type of elements: \n
                  +3 for linear triangle    \n  
                  +4 for linear quadrilateral \n
                  +6 for quadratic triangle \n
                  +8 for quadratic quadrilateral \n
                  -4 for linear triangle/quadrilateral  (mixed mesh) \n
                  -8 for quadratic triangle/quadrilateral \n
- Only linear quadrilateral are used here to generate the \c oomph-lib mesh
- See the \c meshoper.pdf file for a comprehensive listing of all 
available options. 

When run with two input files \c filename.rg2 and filename.cs2, 
  <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A> generates  an output file called 
\c filename.mh2,
which can be processed to generate an \c oomph-lib mesh.

<HR>

\subsection geomview How to visualise a mesh generated by Geompack

To visualise the mesh, the program \c geomview can be used. You can
download it in the 
<A HREF="http://www.geomview.org/">\c Geomview home page
</A>. Unfortunately, the format of the output file of 
 <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A> can't be read by <A HREF="http://www.geomview.org/">\c Geomview
  </A>. A program to convert the <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A>'s output file \c filename.mh2 in a file readable by <A HREF="http://www.geomview.org/">\c Geomview
  </A> is provided: 
  <A HREF="../../../../user_drivers/mesh_from_geompack/make_geom_file.cc"> make_geom_file
</A>  

<HR>

\section example An example: A rectangle with a hole

To illustrate the procedure, we demonstrate how to generate
a mesh for the rectangular domain with a hole shown in the
figure below. The domain is defined by two boundary segments,
each of which connect four points. Note that the node and boundary
numbers correspond to those in the <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A>
input files. In the corresponding \c oomph-lib mesh, the boundaries are 
numbered from zero.

@I w 0.75\textwidth box_hole_2 "A rectangular domain with a hole. "

The input file, \c box_hole.rg2, for this domain is:
\include box_hole.rg2

The input file, \c box_hole.cs2, for this domain is:
\include box_hole.cs2 
  
The output file that  
<A HREF="http://members.shaw.ca/bjoe/index.htm"><CODE>Geompack
</CODE></A>  creates when run with \c box_hole.m2 with the 
parameters \c tolerance= 1.0e-10,\c  n_element= 50 and 
\c ele_type= +4 are contained in the file  
<A HREF="../../../../user_drivers/mesh_from_geompack/box_hole.mh2">
box_hole.mh2.</A>



 Here is a sketch of the resulting quadrilateralisation, 
as displayed by \c geomview :

@I w 0.75\textwidth geomview_box_screenshot "Screenshot of geomview, showing the quadrilateralisation of the rectangular domain with a hole. "


<HR>

\section oomph_use Creating an oomph-lib mesh based on output files generated by Geompack

\c oomph-lib provides a mesh, \c QuadrMesh, that uses the 
output from <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A>  to generate an \c oomph-lib Mesh containing 
elements from the \c QElement<2,NNODE_1D> family of the quadrilateral
elements. The relevant interface is:

\dontinclude mesh_from_geompack_poisson.cc
\skipline QuadrMesh(const
\until Default_TimeStepper

The driver code <A HREF="../../../../user_drivers/mesh_from_geompack/mesh_from_geompack_poisson.cc">mesh_from_geompack_poisson.cc</A>
demonstrates the  use of this mesh for the solution of a
2D Poisson problem in the "rectangular domain with a hole",
described in the previous section.

The code expects the names of \c *.\c rg2 and *.\c cs2 files
generated by <A HREF="http://members.shaw.ca/bjoe/index.htm">\c Geompack
  </A> as command line arguments and stores them 
in the namespace \c CommandLineArgs 

\dontinclude mesh_from_geompack_poisson.cc
\skipline int main
\until }

The names of these files are then passed to the mesh constructor. 
Since the rest of the  <A HREF="../../../../user_drivers/mesh_from_geompack/mesh_from_geompack_poisson.cc">driver
code </A> is identical to that in the
<A HREF="../../../../doc/poisson/two_d_poisson/html/index.html">
corresponding example with a structured mesh</A>, 
we do not provide a detailed listing but simply show the plot of the 
computed results, together with the tanh-shaped exact
solution of the problem:

@I w 0.75\textwidth box_sol "Computed and exact solutions. "


<HR>

