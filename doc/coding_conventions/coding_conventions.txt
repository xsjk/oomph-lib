\mainpage Coding conventions and C++-style

This document provides an overview of the general coding conventions that
are used throughout \c oomph-lib. Knowledge of these conventions
will greatly facilitate the use of the library. Contributors
to the library are expected to adhere to these standards.

<br>
Note that following our move to GitHub we have started to use
<a href="https://clang.llvm.org/docs/ClangFormat.html">clang-format</a>
to automatically format our sources (but only those in the
<code>src</code> directory). The formatting rules are contained in the
<code>.clang-format</code> file in the <code>oomph-lib</code> home
directory. To run this on your own sources you need at least version
10.0.0 of <code>clang-format.</code> Note that some of the code shown
below would be changed slightly by <code>clang-format</code> but this
concerns mainly minor whitespace adjustments and the beauty of
automatic formatting means that you don't have to worry about these
too much.
<HR>
<HR>

\section naming Naming conventions

 \subsection filenames File names

 All C++ source files end with the standard extensions *.h and *.cc.

 - \c *.h: Contains the class definitions and any inline functions.
 - \c *.cc: Contains all non-inline member functions that can be compiled
   once and for all. This includes
   - member functions of classes that do not have any template parameters
   - member functions of templated  classes for which it is
     known a priori which instantiations are required. Examples
     are classes that are templated by the spatial dimension. In this
     case we're unlikely to require instantiations for any values
     other than 0,1,2 and 3.
   .
 - \c *.template.cc: Contains any non-inline member function of
   templated classes.  This file must be included (together
   with the corresponding \c *.h file) when a specific instantiation
   of a templated class is required. For instance,
   most specific \c Mesh classes are templated by
   the element type and the mesh writer can obviously not predict
   which element types his/her specific mesh is going to be
   used with.



 \subsection variables General variables
  - General variables are all lowercase
  - Variables that contain multiple words contain underscores
    to separate them, e.g.
    \code FiniteElement* surface_element_pt; \endcode
  .


 \subsection classes Classes
 - Classes start with capital letter, e.g.
   \code class Shape \endcode

 - If the class name contains multiple words, the first letter
   of any subsequent word also gets capitalised, e.g.
   \code class AlgebraicElement \endcode
 \b Note: No underscores in class names.




 \subsection private_public Private data and access functions to  private data
 Use a capital first letter for private data, and the
 all-lowercase equivalent for the access functions. Examples:
 - This is a declaration for a private data member:
   \code
   private:

     /// Pointer to boundary node
     Node* Boundary_node_pt; \endcode
 - Here are two public access functions to the private data member:
   \code
   public:

    /// Access to boundary node (const version)
    Node* boundary_node_pt() const {return Boundary_node_pt;}

    /// Access to boundary node
    Node*& boundary_node_pt() {return Boundary_node_pt;}

   \endcode
.
 \b Note: Do \b not use public data -- ever! Make it private and
 and provide an access function -- even if it seems "perfectly
 obvious" at the time of writing the class that the internal
 storage for the data item is "never going to be changed".

 \subsection pointers Pointers
 - Pointers and access functions to pointers are identified
   explicitly by the postfix \a _pt to the variable names,
   as shown in the previous examples.

 \subsection numbering Access functions to containers

 Many classes have member functions that provide access to data
 in private containers (e.g. vectors); they are usually accompanied
 by a member function that returns the number of entries
 in that container. Naming conventions:
 - Use singular for the access function to the container, i.e.
   \code
   /// Return pointer to e-th element
   FiniteElement* element_pt(const unsigned& e);
   \endcode
   rather than \c elements_pt(...)
 - Use a prefix `\c n' for the access function for the
   number of entries in the container, i.e.
   \code
   /// Total number of elements
   unsigned nelement();
   \endcode
 \b Notes: (i) No underscore between the "n" and the container's name;
 you can then use the underscore for the name of the local variable
 that stores the value, e.g.
 \c
 unsigned \c n_element \c = \c my_mesh_pt->nelement();
(ii) No trailing \c _pt in the function that returns the number
of objects in the container.

\subsection template Template parameters
- Template parameters are all caps, e.g.
 \code
 template<unsigned DIM>
 class NavierStokesEquations
 {
   public:
   [...]

 };
 \endcode
- Sometimes it is necessary to expose the template parameter to make it
   accessible to the user. This should be done by adding a public \c static
   \c const copy of the parameter to the class's member data, using the
   prefix \c TEMPLATE_PARAMETER_ , so the template parameter
   \c DIM in the above example would be exposed like this:
\code
   public:
   /// Publicly exposed template parameter
   static const unsigned TEMPLATE_PARAMETER_DIM = DIM;
\endcode
   Note the exposure of template parameters is optional and is only
   implemented when we needed it. Feel free to modify existing code
   yourself if required -- \c oomph-lib is open source!
.

\subsection verbose Use descriptive function/variable names

- Make sure you choose descriptive names for functions and variables,
  even if the names become long.


<HR>
<HR>

\section layout Layout etc.


\subsection include_files Position of include statements
- Place include statements at the beginning of each file.

\subsection layout_blocks Layout of blocks
- Braces on separate lines (unless the content is extremely short)
  \code
   for (unsigned i=0;i<10;i++)
     {

      [...]

      std::cout << "doing something" << std::endl;

      [...]

     }
   \endcode


\subsection indentation Indentation
  - Indentation of blocks etc. should follow the emacs standards.
  .


\subsection layout_functions_etc Layout of functions, classes, etc.
- Precede all functions by a comment block, enclosed between lines of `==='
  \code
   // =============================================================
   /// \short (add \short to make sure that multi-line descriptions
   /// appear in doxygen's short documentation. Include lists with items
   /// - first item
   /// - second item
   ///   - first item of sublist
   ///   - second item of sublist
   ///   . //end of sublist
   /// . //end of main list
   // =============================================================
   void SomeClass::some_function()
   {
    for (unsigned i=0;i<10;i++)
     {
      std::cout << "doing something" << std::endl;
     }
    }
   \endcode
   Note the triple slash "///" in the comment block that preceeds the
   function definition -- comments contained in such lines are
   automatically extracted by doxygen and inserted into the
   code documentation.

- All member data is defined (and annotated) on a separate line,
  otherwise doxygen gets confused. So use
  \code
  /// Number of elements
  unsigned Nelement;

  /// Number of nodes
  unsigned Nnode;
  \endcode
  rather than
  \code
  /// Number of elements and nodes
  unsigned Nelement, Nnode;
  \endcode


\subsection oomph The oomph-lib namespace
- \c oomph-lib is contained in its own namespace, \c oomph,
  to avoid clashes of class names with those of other
  (third-party) libraries. If there is no danger of
  name clashes, the entire \c oomph
  namespace may be imported at the beginning of each driver
  code by placing the statement
  \code
  using namespace oomph;
  \endcode
  at the beginning of the source code (after the included header files).
  Any additions to the library (this includes the instantiation
  of templated \c oomph-lib classes inside a driver code!)
  must be included into the \c oomph namespace
  by surrounding the code by
  \code
  namespace oomph
   {

      // Additions to the library go here...
      [...]

   }
  \endcode


\subsection std Namespace pollution
- To avoid namespace pollution, the namespace \c std \b must \b not be
  included globally in any header files. The statement
  \code
  using namespace std;
  \endcode
  may only be used in driver codes, in *.cc files, or inside
  specific functions in a *.h file.

\subsection layout_classes Layout of class definitions and include guards.
Here is an example of a complete header file, including include
guards and library includes.
 \code
     #ifndef OOMPH_SOME_CLASS_HEADER     // Assuming that the file is
     #define OOMPH_SOME_CLASS_HEADER     // called some_class.h

     // Include generic oomph-lib library
     #include "generic.h"

     // Add to oomph-lib namespace
     namespace oomph
     {

     // =============================================================
     /// Waffle about what the class does etc.
     ///
     // =============================================================
     template<class T>
     class SomeClass : public SomeBaseClass
      {
        public:

         /// Constructor: Pass coefficients n1 and n2
         SomeClass(const unsigned& n1, const T& n2) : N1(n1), N2(n2)
          {}

         /// Access function to coefficient
         inline unsigned n1() const
          {
           return N1;
          }

         /// Access function to other coefficient
         inline T& n2() const
          {
           return N2;
          }


        protected:

           /// Coefficient
           unsigned N1;

        private:

           /// Second coefficient
           T  N2;

       };

      }
      #endif

  \endcode

  - Order of public/protected/private may be reversed but
    the declarations should always be explicit (even though
    everything is private by default).
  - Note the prefix <CODE> OOMPH_*</CODE> in the include guard. This is to
    avoid clashes with include guards of other libraries.



<HR>
<HR>


\section debug Debugging etc.


 \subsection paranoia The PARANOID flag and error handling
  - Implement optional validation routines, self-tests, and other
    sanity checks via conditional compilation, using the compiler
    flag PARANOID, so that the relevant statements are only activated if
    \c -DPARANOID is specified as a compilation flag
    for the C++ compiler.
    If errors are detected, a meaningful diagnostic should be issued,
    by throwing an \c OomphLibError.
    If the code is compiled without
    the PARANOID flag, all sanity checks are bypassed -- good for
    the overall execution speed, bad for error handling... The
    user can choose.
    \n\n
    Here's an example: \n\n
  \code

#ifdef PARANOID
 // Has a global mesh already been built?
 if(Mesh_pt!=0)
  {
   std::string error_message =
    "Problem::build_global_mesh() called,\n";
   error_message += " but a global mesh has already been built:\n";
   error_message += "Problem::Mesh_pt is not zero!\n";

   throw OomphLibError(error_message,
                       OOMPH_CURRENT_FUNCTION,
                       OOMPH_EXCEPTION_LOCATION);
  }
  \endcode
  - \c oomph-lib also has an object that allows warning messages to
    be issued in a uniform format. Here's an example of its use:
  \code
     // Was it a duplicate?
     unsigned nel_now=element_set_pt.size();
     if (nel_now==nel_before)
      {
       std::ostringstream warning_stream;
       warning_stream  <<"WARNING: " << std::endl
                       <<"Element " << e << " in submesh " << imesh
                       <<" is a duplicate \n and was ignored when assembling "
                       <<"global mesh." << std::endl;
       OomphLibWarning(warning_stream.str(),
                       OOMPH_CURRENT_FUNCTION,
                       OOMPH_EXCEPTION_LOCATION);
      }
   \endcode


\subsection range Range checking

- Most access functions that provide indexed access to
  a private container, do, in fact, access a private STL vector.
  Explicit range checking for these (frequent!) cases can be avoided
  by changing to container to Vector class instead. Vectors
  performs automatic range checking, if the \c generic library
  is compiled with the \c RANGE_CHECKING flag, i.e. if
  \c -DRANGE_CHECKING is specified as a compilation flag
  for the C++ compiler.
  \b Note: While it is generally a good idea to compile
  with \c PARANOID while developing code, \c RANGE_CHECKING
  is \b very \b expensive and is therefore activated via
  a second independent flag. We only tend to active this flag
  as a last resort, typically to track down particularly
  stubborn segmentation faults.

  \subsection self_test Self test routines
   - Every sufficiently complex class should come with its
     own
     \code unsigned self_test() \endcode
     routine which returns 1 for failure, 0 for successful test.


<HR>
<HR>


\section other Other conventions


\subsection constness Const-ness
- Use const wherever applicable (arguments, member functions,...)
- Always provide const and non-const overloaded subscript operators.
- Example:
\code

  // Return i-th coordinate of Point
   double& operator[](const unsigned& i){return x[i];}

  // Return i-th coordinate of Point -- const version
  const double& operator[](const unsigned& i) const {return x[i];}

\endcode

\subsection unsigned Only use int if a variable can actually take negative values

- Just as the name of a variable gives some indication of its
  likely use, its type does too. For instance this code fragment
  \n
  \code
  // Create a counter
  int counter=0;
  \endcode
  \n
  immediately raises the question why the programmer anticipates
  circumstances in which the counter might be negative. Are negative
  values used to indicate special cases; etc? If the name of the
  variable was chosen correctly (i.e. if the variable really is
  used as a counter) then
  \n
  \code
  // Create a counter
  unsigned counter=0;
  \endcode
  \n
  is much clearer and therefore preferable, even if the two versions
  of the code would, of course, give the same result.
.

\subsection pass_by_reference Only use "pass by reference"
- Arguments to functions should only be passed "by reference",
  not "by value". Use "pass by constant reference" if you want
  to ensure the const-ness of any (input) arguments.
- To "encourage" this behaviour, most \c oomph-lib objects
  have (deliberately) broken copy constructors and assignment
  operators, making a "pass by value" impossible.
  The only exceptions are cases in which we could see
  a good reason why a fully-functional, non-memory-leaking
  copy/assignment operator might be required.

\subsection break_copy Provide fully-functional or deliberately-broken copy constructors and assignment operators

- For the reasons mentioned above, "passing by value" is
  discouraged and we have only implemented copy constructors
  for very few classes. To make the use of C++'s default
  copy constructor impossible (as their accidental use may lead to serious
  memory leaks) all classes should either have a deliberately-broken
  copy constructor or provide a "proper" implementation (as in the case of
  \c oomph-lib's \c Vector class). The same applies to assignment
  operators.
  \n \n
  With the advent of C++11, this can be done easily using the \c delete keyword:
  \n\n
  \code
  /// Broken copy constructor
  Mesh(const Mesh& dummy) = delete;

  /// Broken assignment operator
  void operator=(const Mesh&) = delete;
  \endcode

\subsection order_of_args Order of arguments
- If values are returned from a function, put them at the end
  of the argument list.
- "Time" arguments always come first, e.g.
  \code
  /// \short Return FE interpolated coordinate x[i] at local coordinate s
  /// at previous timestep t (t=0: present; t>0: previous timestep)
  virtual double interpolated_x(const unsigned& t,
                                const Vector<double>& s,
                                const unsigned& i) const;
  \endcode

\subsection brackets Access to elements in containers
 - Avoid access via square brackets (i.e. via operators) and
   write access functions instead, as they can be overloaded more
   easily.

\subsection boolean Boolean member data
 - Avoid access to boolean member data via trivial wrapper functions
   that return references. These constructions lead to somewhat ugly
   driver codes and can lead to code that appears to set a boolean,
   when it does not. Instead the status of the boolean should be
   modified by two set/unset or enable/disable subroutines
   (i.e. returning void) and tested using a (const) has_ or is_
   function that returns a bool . For example
   \code
    private:

      /// Boolean to indicate whether documentation should be on or off
      bool Doc_flag;

    public:

      /// Enable documentation
      void enable_doc() {Doc_flag=true;}

      /// Disable documentation
      void disable_doc() {Doc_flag=false;}

      /// Test whether documentation is on or off
      bool is_doc_enabled() const {return Doc_flag;}
   \endcode

\subsection dont_use_macros Macros
- Don't use macros! There are two exceptions to this rule: We use the
  macros \c OOMPH_EXCEPTION_LOCATION and \c OOMPH_CURRENT_FUNCTION to make
  the file name, line number and current function name available to the \c
  OomphLibException object -- the object that is thrown if a run-time error
  is detected.


 \subsection inlining Inlining
 - Inline all simple set/get functions by placing them into the *.h
   file.
 - \b Careful: Inlined functions should not contain
   calls to member functions of classes that are defined in other files
   as this can lead to triangular dependencies.
