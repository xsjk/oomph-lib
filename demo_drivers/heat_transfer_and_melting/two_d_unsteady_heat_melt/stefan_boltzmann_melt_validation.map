interface(echo=4);
kernelopts(printbytes=false);

#------------------------------------------------------------
# Evolution of radius of inner disk
#------------------------------------------------------------
r0(t):=Radius_innermost-R_hat*(t-sin(2*Pi*t)/(2*Pi));

#------------------------------------------------------------
# Solution in inner region with given, fixed boundary 
# temperature U0 (the melt temperature!). Time variations comes through 
# varying radius and explicit time-dependence controlled
# by V0_hat.
#------------------------------------------------------------
u0:=U0+1/2*(r^2-r0(t)^2)*(V0+1/2*V0_hat*(1+cos(2*Pi*t)));

#------------------------------------------------------------
# Get corresponding source fct
#------------------------------------------------------------
S0:=Beta0*(diff(u0,r$2)+1/r*diff(u0,r))-Alpha0*diff(u0,t);

#------------------------------------------------------------
# Net influx of energy at boundary of inner region
# Positive slope du/dr>0 means temperature is lower
# inside so flux of heat goes INTO the inner region
#------------------------------------------------------------
influx0:=subs(r=r0(t),Beta0*diff(u0,r));

#------------------------------------------------------------
# Melt flux (i.e. flux of energy used for melting). No 
# parameter in there because of the way the equations
# are non-dimensionalised (incorporating the latent
# heat into the non-dimensionalisation of the temperature
# and the heat flux). Minus sign because  dr0/dt<0 if stuff 
# melts.
#------------------------------------------------------------
melt_flux:=-diff(r0(t),t);

#------------------------------------------------------------
# Influx generated by difference between positive 
# radiation from outer region (view factor 1),
# radiation away from heated inner surface, minus the loss
# of energy due to melting;
#------------------------------------------------------------
flux_eqn0:=Sigma*((Theta_0+U1)^4-(Theta_0+U0)^4)-melt_flux-influx0; 

#------------------------------------------------------------
# Solve this for U1 -- the temperature on the inner boundary of
# the outer annulus
#------------------------------------------------------------
U1_test:=(((influx0+melt_flux)/Sigma+(Theta_0+U0)^4))^(1/4)-Theta_0;
test:=simplify(subs(U1=U1_test,flux_eqn0));
U1:=U1_test;

#------------------------------------------------------------
# Postulated solution in outer region with given boundary 
# temperatures U1 and U2
#------------------------------------------------------------
u1:=U1+(U2-U1)*(r-Radius_inner)/(Radius_outer-Radius_inner);


#------------------------------------------------------------
# Net influx of energy at inner boundary of outer region
# Positive slope (du/dr>0 means that there outflux of
# heat from the outer region because the temperature inside
# the annular region (r>R_inner) is greater than on the
# its boundary 
#------------------------------------------------------------
influx1:=-Beta1*subs(r=Radius_inner,diff(u1,r));


#--------------------------------------------------------------------
# Influx generated by difference between (a) incoming
# radiation from (i) inner region (view factor r0(t)/Radius_inner)
# (ii) outer surface (view factor 1-r0(t)/Radius_inner) and
# (b) outgoing radiation.
#--------------------------------------------------------------------
flux_eqn1:=Sigma*((Theta_0+U0)^4*r0(t)/Radius_inner+
                  (Theta_0+U1)^4*(1-(r0(t)/Radius_inner))-
                  (Theta_0+U1)^4)-influx1; 
U2_result:=solve(flux_eqn1,U2);
U2:=U2_result;


#------------------------------------------------------------
# Get corresponding source fct
#------------------------------------------------------------
S1:=Beta1*(diff(u1,r$2)+1/r*diff(u1,r))-Alpha1*diff(u1,t);


#--------------------------------------------------------------------
# Output solutions in C/C++ format 
#--------------------------------------------------------------------
with(codegen);


#--------------------------------------------------------------------
# Source fct in inner region
#--------------------------------------------------------------------
C(eval(S0));

#--------------------------------------------------------------------
# Source fct in outer region
#--------------------------------------------------------------------
C(eval(S1));

#--------------------------------------------------------------------
# Solution in inner region
#--------------------------------------------------------------------
C(eval(u0));

#--------------------------------------------------------------------
# Solution in outer region
#--------------------------------------------------------------------
C(eval(u1));

#--------------------------------------------------------------------
# Melt flux
#--------------------------------------------------------------------
C(eval(melt_flux));

#--------------------------------------------------------------------
# Radius
#--------------------------------------------------------------------
C(eval(r0(t)));

#--------------------------------------------------------------------
# Incoming sb radiation inside
#--------------------------------------------------------------------
C(eval(Sigma*((Theta_0+U1)^4)));

#--------------------------------------------------------------------
# Incoming sb radiation outside
#--------------------------------------------------------------------
C(eval(Sigma*((Theta_0+U0)^4*r0(t)/Radius_inner+
       (Theta_0+U1)^4*(1-(r0(t)/Radius_inner)))));


