# Makefile.in generated by automake 1.16.5 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#==============================================================================
# NOTE:  Mesh files generally come in two parts: *.template.cc and *.template.h
# -----  -- usually there's no *.cc file since meshes are fully templated.
#        It therefore doesn't make any sense to compile mesh sources into 
#        a library. Instead, we combine the two files into a combined mesh 
#        header, *.h, which can be included into a driver code. This means that
#        the entire code (headers and function implementations)
#        can get (re-)compiled with the appropriate element types
#        in each specific driver code. If the constant re-compilation
#        of the (possibly lengthy) mesh sources in *.template.cc gets
#        too costly, then *.template.h and *.template.cc can be
#        included in a separate file where the instantiation of a
#        mesh with a specific element type can be enforced with a
#        template statement.
#
# INSTRUCTIONS: If you want to add a new mesh, provide the templated
#               header and source files,
#
#                   my_mesh.template.h
#
#               and
#
#                   my_mesh.template.cc
#
#               and add the stem of the filename ("my_mesh") to 
#   
#                    mesh_names.list
#
#               and run the script
#
#                    ./build_mesh_makefile.sh
#==============================================================================

#Automatically generated file with filename definitions
#-------------------------------------------------------


VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = src/meshes
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/configure.ac_scripts/automake_init_command_file \
	$(top_srcdir)/config/configure.ac_scripts/makefile_list \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(include_HEADERS) \
	$(library_include_HEADERS) $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(includedir)" \
	"$(DESTDIR)$(library_includedir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libmeshes_la_LIBADD =
am__objects_1 =
am__objects_2 = one_d_mesh.template.lo \
	simple_rectangular_quadmesh.template.lo \
	rectangular_quadmesh.template.lo \
	quarter_circle_sector_mesh.template.lo fish_mesh.template.lo \
	one_d_lagrangian_mesh.template.lo \
	two_layer_spine_mesh.template.lo \
	single_layer_spine_mesh.template.lo \
	bretherton_spine_mesh.template.lo \
	quarter_tube_mesh.template.lo eighth_sphere_mesh.template.lo \
	channel_spine_mesh.template.lo \
	collapsible_channel_mesh.template.lo triangle_mesh.template.lo \
	geompack_mesh.template.lo tetgen_mesh.template.lo \
	simple_rectangular_tri_mesh.template.lo \
	simple_cubic_tet_mesh.template.lo \
	simple_cubic_mesh.template.lo \
	single_layer_cubic_spine_mesh.template.lo \
	channel_with_leaflet_mesh.template.lo \
	cylinder_with_flag_mesh.template.lo \
	fsi_driven_cavity_mesh.template.lo \
	hermite_element_quad_mesh.template.lo \
	circular_shell_mesh.template.lo tube_mesh.template.lo \
	backward_step_mesh.template.lo full_circle_mesh.template.lo \
	horizontal_single_layer_spine_mesh.template.lo \
	xda_tet_mesh.template.lo \
	thin_layer_brick_on_tet_mesh.template.lo \
	brick_from_tet_mesh.template.lo quarter_pipe_mesh.template.lo \
	annular_mesh.template.lo rectangle_with_hole_mesh.template.lo \
	quad_from_triangle_mesh.template.lo \
	refineable_tetgen_mesh.template.lo gmsh_tet_mesh.template.lo \
	rectangle_with_moving_cylinder_mesh.template.lo \
	extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.lo
am__objects_3 = cylinder_with_flag_domain.lo \
	topologically_rectangular_domain.lo
am__objects_4 = $(am__objects_1) $(am__objects_1) $(am__objects_1) \
	$(am__objects_2) $(am__objects_3)
am_libmeshes_la_OBJECTS = $(am__objects_4)
libmeshes_la_OBJECTS = $(am_libmeshes_la_OBJECTS)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/annular_mesh.template.Plo \
	./$(DEPDIR)/backward_step_mesh.template.Plo \
	./$(DEPDIR)/bretherton_spine_mesh.template.Plo \
	./$(DEPDIR)/brick_from_tet_mesh.template.Plo \
	./$(DEPDIR)/channel_spine_mesh.template.Plo \
	./$(DEPDIR)/channel_with_leaflet_mesh.template.Plo \
	./$(DEPDIR)/circular_shell_mesh.template.Plo \
	./$(DEPDIR)/collapsible_channel_mesh.template.Plo \
	./$(DEPDIR)/cylinder_with_flag_domain.Plo \
	./$(DEPDIR)/cylinder_with_flag_mesh.template.Plo \
	./$(DEPDIR)/eighth_sphere_mesh.template.Plo \
	./$(DEPDIR)/extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.Plo \
	./$(DEPDIR)/fish_mesh.template.Plo \
	./$(DEPDIR)/fsi_driven_cavity_mesh.template.Plo \
	./$(DEPDIR)/full_circle_mesh.template.Plo \
	./$(DEPDIR)/geompack_mesh.template.Plo \
	./$(DEPDIR)/gmsh_tet_mesh.template.Plo \
	./$(DEPDIR)/hermite_element_quad_mesh.template.Plo \
	./$(DEPDIR)/horizontal_single_layer_spine_mesh.template.Plo \
	./$(DEPDIR)/one_d_lagrangian_mesh.template.Plo \
	./$(DEPDIR)/one_d_mesh.template.Plo \
	./$(DEPDIR)/quad_from_triangle_mesh.template.Plo \
	./$(DEPDIR)/quarter_circle_sector_mesh.template.Plo \
	./$(DEPDIR)/quarter_pipe_mesh.template.Plo \
	./$(DEPDIR)/quarter_tube_mesh.template.Plo \
	./$(DEPDIR)/rectangle_with_hole_mesh.template.Plo \
	./$(DEPDIR)/rectangle_with_moving_cylinder_mesh.template.Plo \
	./$(DEPDIR)/rectangular_quadmesh.template.Plo \
	./$(DEPDIR)/refineable_tetgen_mesh.template.Plo \
	./$(DEPDIR)/simple_cubic_mesh.template.Plo \
	./$(DEPDIR)/simple_cubic_tet_mesh.template.Plo \
	./$(DEPDIR)/simple_rectangular_quadmesh.template.Plo \
	./$(DEPDIR)/simple_rectangular_tri_mesh.template.Plo \
	./$(DEPDIR)/single_layer_cubic_spine_mesh.template.Plo \
	./$(DEPDIR)/single_layer_spine_mesh.template.Plo \
	./$(DEPDIR)/tetgen_mesh.template.Plo \
	./$(DEPDIR)/thin_layer_brick_on_tet_mesh.template.Plo \
	./$(DEPDIR)/topologically_rectangular_domain.Plo \
	./$(DEPDIR)/triangle_mesh.template.Plo \
	./$(DEPDIR)/tube_mesh.template.Plo \
	./$(DEPDIR)/two_layer_spine_mesh.template.Plo \
	./$(DEPDIR)/xda_tet_mesh.template.Plo
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(libmeshes_la_SOURCES)
DIST_SOURCES = $(libmeshes_la_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(include_HEADERS) $(library_include_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/mesh_clean.aux \
	$(srcdir)/mesh_instructions.aux $(srcdir)/mesh_names.aux \
	$(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@

# Required libraries 
#-------------------
# Include path for library headers -- need to refer to include files
# in src as they will not have been installed yet! 
AM_CPPFLAGS = @AM_CPPFLAGS@ -I$(top_srcdir)/external_src
AM_CXXFLAGS = @AM_CXXFLAGS@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AM_FFLAGS = @AM_FFLAGS@
AM_LDFLAGS = @AM_LDFLAGS@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BLACS_LIB = @BLACS_LIB@
BLAS_LIB = @BLAS_LIB@
BOOST_DIR = @BOOST_DIR@
BOOST_INCLUDE = @BOOST_INCLUDE@
BOOST_LIB = @BOOST_LIB@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CGAL_DIR = @CGAL_DIR@
CGAL_INCLUDE = @CGAL_INCLUDE@
CGAL_LIB = @CGAL_LIB@
CGAL_PERMANENT_INSTALLATION_DIR = @CGAL_PERMANENT_INSTALLATION_DIR@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CSCOPE = @CSCOPE@
CTAGS = @CTAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ETAGS = @ETAGS@
EXEEXT = @EXEEXT@
EXTERNAL_LIBS = @EXTERNAL_LIBS@
F77 = @F77@
FC = @FC@
FCFLAGS = @FCFLAGS@
FFLAGS = @FFLAGS@
FFLAGS_NO_OPT = @FFLAGS_NO_OPT@
FGREP = @FGREP@
FILECMD = @FILECMD@
FLIBS = @FLIBS@
GMP_DIR = @GMP_DIR@
GMP_INCLUDE = @GMP_INCLUDE@
GMP_LIB = @GMP_LIB@
GMSH_RUN_COMMAND = @GMSH_RUN_COMMAND@
GREP = @GREP@
HLIB_INCLUDE = @HLIB_INCLUDE@
HLIB_LIB = @HLIB_LIB@
HYPRE_INCLUDE = @HYPRE_INCLUDE@
HYPRE_LIB = @HYPRE_LIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LAPACK_LIB = @LAPACK_LIB@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
MPFR_DIR = @MPFR_DIR@
MPFR_INCLUDE = @MPFR_INCLUDE@
MPFR_LIB = @MPFR_LIB@
MPI_INCLUDE_DIRECTORY = @MPI_INCLUDE_DIRECTORY@
MPI_RUN_COMMAND = @MPI_RUN_COMMAND@
MPI_VARIABLENP_RUN_COMMAND = @MPI_VARIABLENP_RUN_COMMAND@
MUMPS_AND_SCALAPACK_INCLUDE = @MUMPS_AND_SCALAPACK_INCLUDE@
MUMPS_AND_SCALAPACK_LIB = @MUMPS_AND_SCALAPACK_LIB@
MUMPS_INCLUDE = @MUMPS_INCLUDE@
MUMPS_LIB = @MUMPS_LIB@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PORD_LIB = @PORD_LIB@
PRIVATE_DIR = @PRIVATE_DIR@
PRIVATE_SUBDIRECTORIES = @PRIVATE_SUBDIRECTORIES@
PRIVATE_USER_DRIVER_SUBDIRECTORIES = @PRIVATE_USER_DRIVER_SUBDIRECTORIES@
PRIVATE_USER_SRC_SUBDIRECTORIES = @PRIVATE_USER_SRC_SUBDIRECTORIES@
RANLIB = @RANLIB@
SCALAPACK_LIB = @SCALAPACK_LIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TRILINOS_INCLUDE = @TRILINOS_INCLUDE@
TRILINOS_LIB = @TRILINOS_LIB@
USER_DRIVERS_SUBDIRECTORIES = @USER_DRIVERS_SUBDIRECTORIES@
USER_SRC_SUBDIRECTORIES = @USER_SRC_SUBDIRECTORIES@
VERSION = @VERSION@
WILL_BUILD_MUMPS_AND_SCALAPACK = @WILL_BUILD_MUMPS_AND_SCALAPACK@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
ac_ct_F77 = @ac_ct_F77@
ac_ct_FC = @ac_ct_FC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
have_cmake = @have_cmake@
have_doxygen = @have_doxygen@
have_libtool = @have_libtool@
have_online_triangle = @have_online_triangle@
have_pdf_latex = @have_pdf_latex@
have_python = @have_python@
have_tetgen = @have_tetgen@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

#Define the templated sources
#----------------------------
sources = one_d_mesh.template.cc \
	simple_rectangular_quadmesh.template.cc \
	rectangular_quadmesh.template.cc \
	quarter_circle_sector_mesh.template.cc fish_mesh.template.cc \
	one_d_lagrangian_mesh.template.cc \
	two_layer_spine_mesh.template.cc \
	single_layer_spine_mesh.template.cc \
	bretherton_spine_mesh.template.cc \
	quarter_tube_mesh.template.cc eighth_sphere_mesh.template.cc \
	channel_spine_mesh.template.cc \
	collapsible_channel_mesh.template.cc triangle_mesh.template.cc \
	geompack_mesh.template.cc tetgen_mesh.template.cc \
	simple_rectangular_tri_mesh.template.cc \
	simple_cubic_tet_mesh.template.cc \
	simple_cubic_mesh.template.cc \
	single_layer_cubic_spine_mesh.template.cc \
	channel_with_leaflet_mesh.template.cc \
	cylinder_with_flag_mesh.template.cc \
	fsi_driven_cavity_mesh.template.cc \
	hermite_element_quad_mesh.template.cc \
	circular_shell_mesh.template.cc tube_mesh.template.cc \
	backward_step_mesh.template.cc full_circle_mesh.template.cc \
	horizontal_single_layer_spine_mesh.template.cc \
	xda_tet_mesh.template.cc \
	thin_layer_brick_on_tet_mesh.template.cc \
	brick_from_tet_mesh.template.cc quarter_pipe_mesh.template.cc \
	annular_mesh.template.cc rectangle_with_hole_mesh.template.cc \
	quad_from_triangle_mesh.template.cc \
	refineable_tetgen_mesh.template.cc gmsh_tet_mesh.template.cc \
	rectangle_with_moving_cylinder_mesh.template.cc \
	extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.cc

#Define the templated headers
#----------------------------
templated_headers = one_d_mesh.template.h \
	simple_rectangular_quadmesh.template.h \
	rectangular_quadmesh.template.h \
	quarter_circle_sector_mesh.template.h fish_mesh.template.h \
	one_d_lagrangian_mesh.template.h \
	two_layer_spine_mesh.template.h \
	single_layer_spine_mesh.template.h \
	bretherton_spine_mesh.template.h quarter_tube_mesh.template.h \
	eighth_sphere_mesh.template.h channel_spine_mesh.template.h \
	collapsible_channel_mesh.template.h triangle_mesh.template.h \
	geompack_mesh.template.h tetgen_mesh.template.h \
	simple_rectangular_tri_mesh.template.h \
	simple_cubic_tet_mesh.template.h simple_cubic_mesh.template.h \
	single_layer_cubic_spine_mesh.template.h \
	channel_with_leaflet_mesh.template.h \
	cylinder_with_flag_mesh.template.h \
	fsi_driven_cavity_mesh.template.h \
	hermite_element_quad_mesh.template.h \
	circular_shell_mesh.template.h tube_mesh.template.h \
	backward_step_mesh.template.h full_circle_mesh.template.h \
	horizontal_single_layer_spine_mesh.template.h \
	xda_tet_mesh.template.h \
	thin_layer_brick_on_tet_mesh.template.h \
	brick_from_tet_mesh.template.h quarter_pipe_mesh.template.h \
	annular_mesh.template.h rectangle_with_hole_mesh.template.h \
	quad_from_triangle_mesh.template.h \
	refineable_tetgen_mesh.template.h gmsh_tet_mesh.template.h \
	rectangle_with_moving_cylinder_mesh.template.h \
	extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.h

#Define the combined header
#--------------------------
headers = one_d_mesh.h simple_rectangular_quadmesh.h rectangular_quadmesh.h quarter_circle_sector_mesh.h fish_mesh.h one_d_lagrangian_mesh.h two_layer_spine_mesh.h single_layer_spine_mesh.h bretherton_spine_mesh.h quarter_tube_mesh.h eighth_sphere_mesh.h channel_spine_mesh.h collapsible_channel_mesh.h triangle_mesh.h geompack_mesh.h tetgen_mesh.h simple_rectangular_tri_mesh.h simple_cubic_tet_mesh.h simple_cubic_mesh.h single_layer_cubic_spine_mesh.h channel_with_leaflet_mesh.h cylinder_with_flag_mesh.h fsi_driven_cavity_mesh.h hermite_element_quad_mesh.h circular_shell_mesh.h tube_mesh.h backward_step_mesh.h full_circle_mesh.h horizontal_single_layer_spine_mesh.h xda_tet_mesh.h thin_layer_brick_on_tet_mesh.h brick_from_tet_mesh.h quarter_pipe_mesh.h annular_mesh.h rectangle_with_hole_mesh.h quad_from_triangle_mesh.h refineable_tetgen_mesh.h gmsh_tet_mesh.h rectangle_with_moving_cylinder_mesh.h extruded_cube_mesh_from_quad_mesh_with_macro_elements.h

# Include various mesh names (generated automatically from mesh_names.list)

# Define name of library
libname = meshes

# Define the non-mesh headers
non_mesh_headers = \
collapsible_channel_domain.h  fish_domain.h channel_with_leaflet_domain.h \
quarter_tube_domain.h eighth_sphere_domain.h quarter_circle_sector_domain.h \
cylinder_with_flag_domain.h topologically_rectangular_domain.h \
tube_domain.h full_circle_domain.h quarter_pipe_domain.h annular_domain.h \
rectangle_with_hole_domain.h


# Define the non-mesh sources
non_mesh_sources = \
cylinder_with_flag_domain.cc topologically_rectangular_domain.cc


# Combine headers and sources
headers_and_sources = $(non_mesh_headers) $(headers) $(templated_headers) $(sources) $(non_mesh_sources)

# Define the library that *would* get placed in lib directory...
# We define this simply to create a specific target --  the library
# is empty and does therefore not need to be installed
#-----------------------------------------------------
#noinst_LTLIBRARIES = libmeshes.la
lib_LTLIBRARIES = libmeshes.la

# Sources that the library depends on: 
#-------------------------------------
libmeshes_la_SOURCES = mesh_instructions.aux mesh_names.aux mesh_clean.aux \
	             $(headers_and_sources)


# The library's include headers:
#-------------------------------
# Headers that are to be included in the $(includedir) directory:
# This is the combined header which contains "#include<...>" commands
# for the real headers in the subdirectory below  $(includedir)
include_HEADERS = $(libname).h 

#Here's the subdirectory where the actual header files are placed
library_includedir = $(includedir)/meshes

#These are the header files that are to be placed in subdirectory
library_include_HEADERS = $(headers_and_sources)

# Distribute the list of mesh names and the build script for the include files
EXTRA_DIST = mesh_names.list
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/mesh_names.aux $(srcdir)/mesh_instructions.aux $(srcdir)/mesh_clean.aux $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/meshes/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/meshes/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(srcdir)/mesh_names.aux $(srcdir)/mesh_instructions.aux $(srcdir)/mesh_clean.aux $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libmeshes.la: $(libmeshes_la_OBJECTS) $(libmeshes_la_DEPENDENCIES) $(EXTRA_libmeshes_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(CXXLINK) -rpath $(libdir) $(libmeshes_la_OBJECTS) $(libmeshes_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/annular_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/backward_step_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bretherton_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brick_from_tet_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/channel_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/channel_with_leaflet_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/circular_shell_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/collapsible_channel_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cylinder_with_flag_domain.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cylinder_with_flag_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eighth_sphere_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fish_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fsi_driven_cavity_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/full_circle_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/geompack_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gmsh_tet_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hermite_element_quad_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/horizontal_single_layer_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/one_d_lagrangian_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/one_d_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quad_from_triangle_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quarter_circle_sector_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quarter_pipe_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/quarter_tube_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rectangle_with_hole_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rectangle_with_moving_cylinder_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rectangular_quadmesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/refineable_tetgen_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_cubic_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_cubic_tet_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_rectangular_quadmesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/simple_rectangular_tri_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/single_layer_cubic_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/single_layer_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tetgen_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/thin_layer_brick_on_tet_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/topologically_rectangular_domain.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/triangle_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tube_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/two_layer_spine_mesh.template.Plo@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xda_tet_mesh.template.Plo@am__quote@ # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cc.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(includedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(includedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(includedir)" || exit $$?; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(includedir)'; $(am__uninstall_files_from_dir)
install-library_includeHEADERS: $(library_include_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(library_include_HEADERS)'; test -n "$(library_includedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(library_includedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(library_includedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(library_includedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(library_includedir)" || exit $$?; \
	done

uninstall-library_includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(library_include_HEADERS)'; test -n "$(library_includedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(library_includedir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(includedir)" "$(DESTDIR)$(library_includedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/annular_mesh.template.Plo
	-rm -f ./$(DEPDIR)/backward_step_mesh.template.Plo
	-rm -f ./$(DEPDIR)/bretherton_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/brick_from_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/channel_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/channel_with_leaflet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/circular_shell_mesh.template.Plo
	-rm -f ./$(DEPDIR)/collapsible_channel_mesh.template.Plo
	-rm -f ./$(DEPDIR)/cylinder_with_flag_domain.Plo
	-rm -f ./$(DEPDIR)/cylinder_with_flag_mesh.template.Plo
	-rm -f ./$(DEPDIR)/eighth_sphere_mesh.template.Plo
	-rm -f ./$(DEPDIR)/extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.Plo
	-rm -f ./$(DEPDIR)/fish_mesh.template.Plo
	-rm -f ./$(DEPDIR)/fsi_driven_cavity_mesh.template.Plo
	-rm -f ./$(DEPDIR)/full_circle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/geompack_mesh.template.Plo
	-rm -f ./$(DEPDIR)/gmsh_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/hermite_element_quad_mesh.template.Plo
	-rm -f ./$(DEPDIR)/horizontal_single_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/one_d_lagrangian_mesh.template.Plo
	-rm -f ./$(DEPDIR)/one_d_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quad_from_triangle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_circle_sector_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_pipe_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_tube_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangle_with_hole_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangle_with_moving_cylinder_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangular_quadmesh.template.Plo
	-rm -f ./$(DEPDIR)/refineable_tetgen_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_cubic_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_cubic_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_rectangular_quadmesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_rectangular_tri_mesh.template.Plo
	-rm -f ./$(DEPDIR)/single_layer_cubic_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/single_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/tetgen_mesh.template.Plo
	-rm -f ./$(DEPDIR)/thin_layer_brick_on_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/topologically_rectangular_domain.Plo
	-rm -f ./$(DEPDIR)/triangle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/tube_mesh.template.Plo
	-rm -f ./$(DEPDIR)/two_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/xda_tet_mesh.template.Plo
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-local distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-includeHEADERS install-library_includeHEADERS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook
install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/annular_mesh.template.Plo
	-rm -f ./$(DEPDIR)/backward_step_mesh.template.Plo
	-rm -f ./$(DEPDIR)/bretherton_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/brick_from_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/channel_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/channel_with_leaflet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/circular_shell_mesh.template.Plo
	-rm -f ./$(DEPDIR)/collapsible_channel_mesh.template.Plo
	-rm -f ./$(DEPDIR)/cylinder_with_flag_domain.Plo
	-rm -f ./$(DEPDIR)/cylinder_with_flag_mesh.template.Plo
	-rm -f ./$(DEPDIR)/eighth_sphere_mesh.template.Plo
	-rm -f ./$(DEPDIR)/extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.Plo
	-rm -f ./$(DEPDIR)/fish_mesh.template.Plo
	-rm -f ./$(DEPDIR)/fsi_driven_cavity_mesh.template.Plo
	-rm -f ./$(DEPDIR)/full_circle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/geompack_mesh.template.Plo
	-rm -f ./$(DEPDIR)/gmsh_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/hermite_element_quad_mesh.template.Plo
	-rm -f ./$(DEPDIR)/horizontal_single_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/one_d_lagrangian_mesh.template.Plo
	-rm -f ./$(DEPDIR)/one_d_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quad_from_triangle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_circle_sector_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_pipe_mesh.template.Plo
	-rm -f ./$(DEPDIR)/quarter_tube_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangle_with_hole_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangle_with_moving_cylinder_mesh.template.Plo
	-rm -f ./$(DEPDIR)/rectangular_quadmesh.template.Plo
	-rm -f ./$(DEPDIR)/refineable_tetgen_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_cubic_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_cubic_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_rectangular_quadmesh.template.Plo
	-rm -f ./$(DEPDIR)/simple_rectangular_tri_mesh.template.Plo
	-rm -f ./$(DEPDIR)/single_layer_cubic_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/single_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/tetgen_mesh.template.Plo
	-rm -f ./$(DEPDIR)/thin_layer_brick_on_tet_mesh.template.Plo
	-rm -f ./$(DEPDIR)/topologically_rectangular_domain.Plo
	-rm -f ./$(DEPDIR)/triangle_mesh.template.Plo
	-rm -f ./$(DEPDIR)/tube_mesh.template.Plo
	-rm -f ./$(DEPDIR)/two_layer_spine_mesh.template.Plo
	-rm -f ./$(DEPDIR)/xda_tet_mesh.template.Plo
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-includeHEADERS uninstall-libLTLIBRARIES \
	uninstall-library_includeHEADERS

.MAKE: install-am install-data-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-am clean \
	clean-generic clean-libLTLIBRARIES clean-libtool clean-local \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-local \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am \
	install-data-hook install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am \
	install-includeHEADERS install-info install-info-am \
	install-libLTLIBRARIES install-library_includeHEADERS \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-includeHEADERS uninstall-libLTLIBRARIES \
	uninstall-library_includeHEADERS

.PRECIOUS: Makefile


# All the auxilliary files are built by the build_mesh_makefile.sh script
# and all need to be rebuilt if mesh_names.list changes
mesh_instructions.aux mesh_names.aux mesh_clean.aux: mesh_names.list
	$(top_srcdir)/bin/build_mesh_makefile.sh $(top_srcdir)

# How to build the combined meshes 
#----------------------------------
one_d_mesh.h:  one_d_mesh.dummy
one_d_mesh.dummy:  one_d_mesh.template.h   one_d_mesh.template.cc
	 echo "// Automatically generated, combined header file" > one_d_mesh.h
	 echo "#include \"one_d_mesh.template.h\" " >> one_d_mesh.h 
	 echo "#include \"one_d_mesh.template.cc\" " >> one_d_mesh.h 

simple_rectangular_quadmesh.h:  simple_rectangular_quadmesh.dummy
simple_rectangular_quadmesh.dummy:  simple_rectangular_quadmesh.template.h   simple_rectangular_quadmesh.template.cc
	 echo "// Automatically generated, combined header file" > simple_rectangular_quadmesh.h
	 echo "#include \"simple_rectangular_quadmesh.template.h\" " >> simple_rectangular_quadmesh.h 
	 echo "#include \"simple_rectangular_quadmesh.template.cc\" " >> simple_rectangular_quadmesh.h 

rectangular_quadmesh.h:  rectangular_quadmesh.dummy
rectangular_quadmesh.dummy:  rectangular_quadmesh.template.h   rectangular_quadmesh.template.cc
	 echo "// Automatically generated, combined header file" > rectangular_quadmesh.h
	 echo "#include \"rectangular_quadmesh.template.h\" " >> rectangular_quadmesh.h 
	 echo "#include \"rectangular_quadmesh.template.cc\" " >> rectangular_quadmesh.h 

quarter_circle_sector_mesh.h:  quarter_circle_sector_mesh.dummy
quarter_circle_sector_mesh.dummy:  quarter_circle_sector_mesh.template.h   quarter_circle_sector_mesh.template.cc
	 echo "// Automatically generated, combined header file" > quarter_circle_sector_mesh.h
	 echo "#include \"quarter_circle_sector_mesh.template.h\" " >> quarter_circle_sector_mesh.h 
	 echo "#include \"quarter_circle_sector_mesh.template.cc\" " >> quarter_circle_sector_mesh.h 

fish_mesh.h:  fish_mesh.dummy
fish_mesh.dummy:  fish_mesh.template.h   fish_mesh.template.cc
	 echo "// Automatically generated, combined header file" > fish_mesh.h
	 echo "#include \"fish_mesh.template.h\" " >> fish_mesh.h 
	 echo "#include \"fish_mesh.template.cc\" " >> fish_mesh.h 

one_d_lagrangian_mesh.h:  one_d_lagrangian_mesh.dummy
one_d_lagrangian_mesh.dummy:  one_d_lagrangian_mesh.template.h   one_d_lagrangian_mesh.template.cc
	 echo "// Automatically generated, combined header file" > one_d_lagrangian_mesh.h
	 echo "#include \"one_d_lagrangian_mesh.template.h\" " >> one_d_lagrangian_mesh.h 
	 echo "#include \"one_d_lagrangian_mesh.template.cc\" " >> one_d_lagrangian_mesh.h 

two_layer_spine_mesh.h:  two_layer_spine_mesh.dummy
two_layer_spine_mesh.dummy:  two_layer_spine_mesh.template.h   two_layer_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > two_layer_spine_mesh.h
	 echo "#include \"two_layer_spine_mesh.template.h\" " >> two_layer_spine_mesh.h 
	 echo "#include \"two_layer_spine_mesh.template.cc\" " >> two_layer_spine_mesh.h 

single_layer_spine_mesh.h:  single_layer_spine_mesh.dummy
single_layer_spine_mesh.dummy:  single_layer_spine_mesh.template.h   single_layer_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > single_layer_spine_mesh.h
	 echo "#include \"single_layer_spine_mesh.template.h\" " >> single_layer_spine_mesh.h 
	 echo "#include \"single_layer_spine_mesh.template.cc\" " >> single_layer_spine_mesh.h 

bretherton_spine_mesh.h:  bretherton_spine_mesh.dummy
bretherton_spine_mesh.dummy:  bretherton_spine_mesh.template.h   bretherton_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > bretherton_spine_mesh.h
	 echo "#include \"bretherton_spine_mesh.template.h\" " >> bretherton_spine_mesh.h 
	 echo "#include \"bretherton_spine_mesh.template.cc\" " >> bretherton_spine_mesh.h 

quarter_tube_mesh.h:  quarter_tube_mesh.dummy
quarter_tube_mesh.dummy:  quarter_tube_mesh.template.h   quarter_tube_mesh.template.cc
	 echo "// Automatically generated, combined header file" > quarter_tube_mesh.h
	 echo "#include \"quarter_tube_mesh.template.h\" " >> quarter_tube_mesh.h 
	 echo "#include \"quarter_tube_mesh.template.cc\" " >> quarter_tube_mesh.h 

eighth_sphere_mesh.h:  eighth_sphere_mesh.dummy
eighth_sphere_mesh.dummy:  eighth_sphere_mesh.template.h   eighth_sphere_mesh.template.cc
	 echo "// Automatically generated, combined header file" > eighth_sphere_mesh.h
	 echo "#include \"eighth_sphere_mesh.template.h\" " >> eighth_sphere_mesh.h 
	 echo "#include \"eighth_sphere_mesh.template.cc\" " >> eighth_sphere_mesh.h 

channel_spine_mesh.h:  channel_spine_mesh.dummy
channel_spine_mesh.dummy:  channel_spine_mesh.template.h   channel_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > channel_spine_mesh.h
	 echo "#include \"channel_spine_mesh.template.h\" " >> channel_spine_mesh.h 
	 echo "#include \"channel_spine_mesh.template.cc\" " >> channel_spine_mesh.h 

collapsible_channel_mesh.h:  collapsible_channel_mesh.dummy
collapsible_channel_mesh.dummy:  collapsible_channel_mesh.template.h   collapsible_channel_mesh.template.cc
	 echo "// Automatically generated, combined header file" > collapsible_channel_mesh.h
	 echo "#include \"collapsible_channel_mesh.template.h\" " >> collapsible_channel_mesh.h 
	 echo "#include \"collapsible_channel_mesh.template.cc\" " >> collapsible_channel_mesh.h 

triangle_mesh.h:  triangle_mesh.dummy
triangle_mesh.dummy:  triangle_mesh.template.h   triangle_mesh.template.cc
	 echo "// Automatically generated, combined header file" > triangle_mesh.h
	 echo "#include \"triangle_mesh.template.h\" " >> triangle_mesh.h 
	 echo "#include \"triangle_mesh.template.cc\" " >> triangle_mesh.h 

geompack_mesh.h:  geompack_mesh.dummy
geompack_mesh.dummy:  geompack_mesh.template.h   geompack_mesh.template.cc
	 echo "// Automatically generated, combined header file" > geompack_mesh.h
	 echo "#include \"geompack_mesh.template.h\" " >> geompack_mesh.h 
	 echo "#include \"geompack_mesh.template.cc\" " >> geompack_mesh.h 

tetgen_mesh.h:  tetgen_mesh.dummy
tetgen_mesh.dummy:  tetgen_mesh.template.h   tetgen_mesh.template.cc
	 echo "// Automatically generated, combined header file" > tetgen_mesh.h
	 echo "#include \"tetgen_mesh.template.h\" " >> tetgen_mesh.h 
	 echo "#include \"tetgen_mesh.template.cc\" " >> tetgen_mesh.h 

simple_rectangular_tri_mesh.h:  simple_rectangular_tri_mesh.dummy
simple_rectangular_tri_mesh.dummy:  simple_rectangular_tri_mesh.template.h   simple_rectangular_tri_mesh.template.cc
	 echo "// Automatically generated, combined header file" > simple_rectangular_tri_mesh.h
	 echo "#include \"simple_rectangular_tri_mesh.template.h\" " >> simple_rectangular_tri_mesh.h 
	 echo "#include \"simple_rectangular_tri_mesh.template.cc\" " >> simple_rectangular_tri_mesh.h 

simple_cubic_tet_mesh.h:  simple_cubic_tet_mesh.dummy
simple_cubic_tet_mesh.dummy:  simple_cubic_tet_mesh.template.h   simple_cubic_tet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > simple_cubic_tet_mesh.h
	 echo "#include \"simple_cubic_tet_mesh.template.h\" " >> simple_cubic_tet_mesh.h 
	 echo "#include \"simple_cubic_tet_mesh.template.cc\" " >> simple_cubic_tet_mesh.h 

simple_cubic_mesh.h:  simple_cubic_mesh.dummy
simple_cubic_mesh.dummy:  simple_cubic_mesh.template.h   simple_cubic_mesh.template.cc
	 echo "// Automatically generated, combined header file" > simple_cubic_mesh.h
	 echo "#include \"simple_cubic_mesh.template.h\" " >> simple_cubic_mesh.h 
	 echo "#include \"simple_cubic_mesh.template.cc\" " >> simple_cubic_mesh.h 

single_layer_cubic_spine_mesh.h:  single_layer_cubic_spine_mesh.dummy
single_layer_cubic_spine_mesh.dummy:  single_layer_cubic_spine_mesh.template.h   single_layer_cubic_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > single_layer_cubic_spine_mesh.h
	 echo "#include \"single_layer_cubic_spine_mesh.template.h\" " >> single_layer_cubic_spine_mesh.h 
	 echo "#include \"single_layer_cubic_spine_mesh.template.cc\" " >> single_layer_cubic_spine_mesh.h 

channel_with_leaflet_mesh.h:  channel_with_leaflet_mesh.dummy
channel_with_leaflet_mesh.dummy:  channel_with_leaflet_mesh.template.h   channel_with_leaflet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > channel_with_leaflet_mesh.h
	 echo "#include \"channel_with_leaflet_mesh.template.h\" " >> channel_with_leaflet_mesh.h 
	 echo "#include \"channel_with_leaflet_mesh.template.cc\" " >> channel_with_leaflet_mesh.h 

cylinder_with_flag_mesh.h:  cylinder_with_flag_mesh.dummy
cylinder_with_flag_mesh.dummy:  cylinder_with_flag_mesh.template.h   cylinder_with_flag_mesh.template.cc
	 echo "// Automatically generated, combined header file" > cylinder_with_flag_mesh.h
	 echo "#include \"cylinder_with_flag_mesh.template.h\" " >> cylinder_with_flag_mesh.h 
	 echo "#include \"cylinder_with_flag_mesh.template.cc\" " >> cylinder_with_flag_mesh.h 

fsi_driven_cavity_mesh.h:  fsi_driven_cavity_mesh.dummy
fsi_driven_cavity_mesh.dummy:  fsi_driven_cavity_mesh.template.h   fsi_driven_cavity_mesh.template.cc
	 echo "// Automatically generated, combined header file" > fsi_driven_cavity_mesh.h
	 echo "#include \"fsi_driven_cavity_mesh.template.h\" " >> fsi_driven_cavity_mesh.h 
	 echo "#include \"fsi_driven_cavity_mesh.template.cc\" " >> fsi_driven_cavity_mesh.h 

hermite_element_quad_mesh.h:  hermite_element_quad_mesh.dummy
hermite_element_quad_mesh.dummy:  hermite_element_quad_mesh.template.h   hermite_element_quad_mesh.template.cc
	 echo "// Automatically generated, combined header file" > hermite_element_quad_mesh.h
	 echo "#include \"hermite_element_quad_mesh.template.h\" " >> hermite_element_quad_mesh.h 
	 echo "#include \"hermite_element_quad_mesh.template.cc\" " >> hermite_element_quad_mesh.h 

circular_shell_mesh.h:  circular_shell_mesh.dummy
circular_shell_mesh.dummy:  circular_shell_mesh.template.h   circular_shell_mesh.template.cc
	 echo "// Automatically generated, combined header file" > circular_shell_mesh.h
	 echo "#include \"circular_shell_mesh.template.h\" " >> circular_shell_mesh.h 
	 echo "#include \"circular_shell_mesh.template.cc\" " >> circular_shell_mesh.h 

tube_mesh.h:  tube_mesh.dummy
tube_mesh.dummy:  tube_mesh.template.h   tube_mesh.template.cc
	 echo "// Automatically generated, combined header file" > tube_mesh.h
	 echo "#include \"tube_mesh.template.h\" " >> tube_mesh.h 
	 echo "#include \"tube_mesh.template.cc\" " >> tube_mesh.h 

backward_step_mesh.h:  backward_step_mesh.dummy
backward_step_mesh.dummy:  backward_step_mesh.template.h   backward_step_mesh.template.cc
	 echo "// Automatically generated, combined header file" > backward_step_mesh.h
	 echo "#include \"backward_step_mesh.template.h\" " >> backward_step_mesh.h 
	 echo "#include \"backward_step_mesh.template.cc\" " >> backward_step_mesh.h 

full_circle_mesh.h:  full_circle_mesh.dummy
full_circle_mesh.dummy:  full_circle_mesh.template.h   full_circle_mesh.template.cc
	 echo "// Automatically generated, combined header file" > full_circle_mesh.h
	 echo "#include \"full_circle_mesh.template.h\" " >> full_circle_mesh.h 
	 echo "#include \"full_circle_mesh.template.cc\" " >> full_circle_mesh.h 

horizontal_single_layer_spine_mesh.h:  horizontal_single_layer_spine_mesh.dummy
horizontal_single_layer_spine_mesh.dummy:  horizontal_single_layer_spine_mesh.template.h   horizontal_single_layer_spine_mesh.template.cc
	 echo "// Automatically generated, combined header file" > horizontal_single_layer_spine_mesh.h
	 echo "#include \"horizontal_single_layer_spine_mesh.template.h\" " >> horizontal_single_layer_spine_mesh.h 
	 echo "#include \"horizontal_single_layer_spine_mesh.template.cc\" " >> horizontal_single_layer_spine_mesh.h 

xda_tet_mesh.h:  xda_tet_mesh.dummy
xda_tet_mesh.dummy:  xda_tet_mesh.template.h   xda_tet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > xda_tet_mesh.h
	 echo "#include \"xda_tet_mesh.template.h\" " >> xda_tet_mesh.h 
	 echo "#include \"xda_tet_mesh.template.cc\" " >> xda_tet_mesh.h 

thin_layer_brick_on_tet_mesh.h:  thin_layer_brick_on_tet_mesh.dummy
thin_layer_brick_on_tet_mesh.dummy:  thin_layer_brick_on_tet_mesh.template.h   thin_layer_brick_on_tet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > thin_layer_brick_on_tet_mesh.h
	 echo "#include \"thin_layer_brick_on_tet_mesh.template.h\" " >> thin_layer_brick_on_tet_mesh.h 
	 echo "#include \"thin_layer_brick_on_tet_mesh.template.cc\" " >> thin_layer_brick_on_tet_mesh.h 

brick_from_tet_mesh.h:  brick_from_tet_mesh.dummy
brick_from_tet_mesh.dummy:  brick_from_tet_mesh.template.h   brick_from_tet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > brick_from_tet_mesh.h
	 echo "#include \"brick_from_tet_mesh.template.h\" " >> brick_from_tet_mesh.h 
	 echo "#include \"brick_from_tet_mesh.template.cc\" " >> brick_from_tet_mesh.h 

quarter_pipe_mesh.h:  quarter_pipe_mesh.dummy
quarter_pipe_mesh.dummy:  quarter_pipe_mesh.template.h   quarter_pipe_mesh.template.cc
	 echo "// Automatically generated, combined header file" > quarter_pipe_mesh.h
	 echo "#include \"quarter_pipe_mesh.template.h\" " >> quarter_pipe_mesh.h 
	 echo "#include \"quarter_pipe_mesh.template.cc\" " >> quarter_pipe_mesh.h 

annular_mesh.h:  annular_mesh.dummy
annular_mesh.dummy:  annular_mesh.template.h   annular_mesh.template.cc
	 echo "// Automatically generated, combined header file" > annular_mesh.h
	 echo "#include \"annular_mesh.template.h\" " >> annular_mesh.h 
	 echo "#include \"annular_mesh.template.cc\" " >> annular_mesh.h 

rectangle_with_hole_mesh.h:  rectangle_with_hole_mesh.dummy
rectangle_with_hole_mesh.dummy:  rectangle_with_hole_mesh.template.h   rectangle_with_hole_mesh.template.cc
	 echo "// Automatically generated, combined header file" > rectangle_with_hole_mesh.h
	 echo "#include \"rectangle_with_hole_mesh.template.h\" " >> rectangle_with_hole_mesh.h 
	 echo "#include \"rectangle_with_hole_mesh.template.cc\" " >> rectangle_with_hole_mesh.h 

quad_from_triangle_mesh.h:  quad_from_triangle_mesh.dummy
quad_from_triangle_mesh.dummy:  quad_from_triangle_mesh.template.h   quad_from_triangle_mesh.template.cc
	 echo "// Automatically generated, combined header file" > quad_from_triangle_mesh.h
	 echo "#include \"quad_from_triangle_mesh.template.h\" " >> quad_from_triangle_mesh.h 
	 echo "#include \"quad_from_triangle_mesh.template.cc\" " >> quad_from_triangle_mesh.h 

refineable_tetgen_mesh.h:  refineable_tetgen_mesh.dummy
refineable_tetgen_mesh.dummy:  refineable_tetgen_mesh.template.h   refineable_tetgen_mesh.template.cc
	 echo "// Automatically generated, combined header file" > refineable_tetgen_mesh.h
	 echo "#include \"refineable_tetgen_mesh.template.h\" " >> refineable_tetgen_mesh.h 
	 echo "#include \"refineable_tetgen_mesh.template.cc\" " >> refineable_tetgen_mesh.h 

gmsh_tet_mesh.h:  gmsh_tet_mesh.dummy
gmsh_tet_mesh.dummy:  gmsh_tet_mesh.template.h   gmsh_tet_mesh.template.cc
	 echo "// Automatically generated, combined header file" > gmsh_tet_mesh.h
	 echo "#include \"gmsh_tet_mesh.template.h\" " >> gmsh_tet_mesh.h 
	 echo "#include \"gmsh_tet_mesh.template.cc\" " >> gmsh_tet_mesh.h 

rectangle_with_moving_cylinder_mesh.h:  rectangle_with_moving_cylinder_mesh.dummy
rectangle_with_moving_cylinder_mesh.dummy:  rectangle_with_moving_cylinder_mesh.template.h   rectangle_with_moving_cylinder_mesh.template.cc
	 echo "// Automatically generated, combined header file" > rectangle_with_moving_cylinder_mesh.h
	 echo "#include \"rectangle_with_moving_cylinder_mesh.template.h\" " >> rectangle_with_moving_cylinder_mesh.h 
	 echo "#include \"rectangle_with_moving_cylinder_mesh.template.cc\" " >> rectangle_with_moving_cylinder_mesh.h 

extruded_cube_mesh_from_quad_mesh_with_macro_elements.h:  extruded_cube_mesh_from_quad_mesh_with_macro_elements.dummy
extruded_cube_mesh_from_quad_mesh_with_macro_elements.dummy:  extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.h   extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.cc
	 echo "// Automatically generated, combined header file" > extruded_cube_mesh_from_quad_mesh_with_macro_elements.h
	 echo "#include \"extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.h\" " >> extruded_cube_mesh_from_quad_mesh_with_macro_elements.h 
	 echo "#include \"extruded_cube_mesh_from_quad_mesh_with_macro_elements.template.cc\" " >> extruded_cube_mesh_from_quad_mesh_with_macro_elements.h 

# Include instructions how to build the combined meshes
# (generated automatically from mesh_names.list)

# Combined header file
#---------------------
# Rule for building combined header (dummy target never gets made so
# the combined header is remade every time)
$(libname).h: dummy_$(libname).h

dummy_$(libname).h:  
	echo  $(libname) $(headers) $(non_mesh_headers) > all_$(libname).aux
	$(AWK) -f $(top_srcdir)/bin/headers.awk < \
	       all_$(libname).aux > $(libname).h
	rm all_$(libname).aux
#
# Extra hook for install: Optionally replace headers by symbolic links
#---------------------------------------------------------------------
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@install-data-hook: 
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@	(cd $(library_includedir) && rm -f $(headers_and_sources) )
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@	(echo "$(headers_and_sources)" > include_files.list )
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@	($(top_srcdir)/bin/change_headers_to_links.sh `pwd`)
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@	($(LN_S) `cat include_files.list.aux` $(library_includedir) )
@SYMBOLIC_LINKS_FOR_HEADERS_TRUE@	(rm -r include_files.list.aux include_files.list ) 
@SYMBOLIC_LINKS_FOR_HEADERS_FALSE@install-data-hook: 

# How to delete the combined mesh header files 
#----------------------------------
clean-local:
	 rm -f one_d_mesh.h meshes.h simple_rectangular_quadmesh.h meshes.h rectangular_quadmesh.h meshes.h quarter_circle_sector_mesh.h meshes.h fish_mesh.h meshes.h one_d_lagrangian_mesh.h meshes.h two_layer_spine_mesh.h meshes.h single_layer_spine_mesh.h meshes.h bretherton_spine_mesh.h meshes.h quarter_tube_mesh.h meshes.h eighth_sphere_mesh.h meshes.h channel_spine_mesh.h meshes.h collapsible_channel_mesh.h meshes.h triangle_mesh.h meshes.h geompack_mesh.h meshes.h tetgen_mesh.h meshes.h simple_rectangular_tri_mesh.h meshes.h simple_cubic_tet_mesh.h meshes.h simple_cubic_mesh.h meshes.h single_layer_cubic_spine_mesh.h meshes.h channel_with_leaflet_mesh.h meshes.h cylinder_with_flag_mesh.h meshes.h fsi_driven_cavity_mesh.h meshes.h hermite_element_quad_mesh.h meshes.h circular_shell_mesh.h meshes.h tube_mesh.h meshes.h backward_step_mesh.h meshes.h full_circle_mesh.h meshes.h horizontal_single_layer_spine_mesh.h meshes.h xda_tet_mesh.h meshes.h thin_layer_brick_on_tet_mesh.h meshes.h brick_from_tet_mesh.h meshes.h quarter_pipe_mesh.h meshes.h annular_mesh.h meshes.h rectangle_with_hole_mesh.h meshes.h quad_from_triangle_mesh.h meshes.h refineable_tetgen_mesh.h meshes.h gmsh_tet_mesh.h meshes.h rectangle_with_moving_cylinder_mesh.h meshes.h extruded_cube_mesh_from_quad_mesh_with_macro_elements.h meshes.h 

# Cleanup: Kill automatically generated combined header files
distclean-local: 
	rm -f $(libname).h
# DON'T DELETE THESE (CHANGE FOLLOWING DAVID'S REWRITE)
#	rm -f mesh_names.aux mesh_instructions.aux mesh_clean.aux $(libname).h

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
